{"version":3,"sources":["../../src/cfn/api-gateway.js"],"names":[],"mappings":";;;;;;;AAAA;;;;;;AAEO,IAAI,wDAAwB,UAAS;AAC1C,UAD0C;AAE1C,WAF0C;AAG1C,WAH0C;AAI1C,UAJ0C;AAK1C;AAL0C,CAAT,EAMhC;AACD,MAAI,kBAAmB,YAAW;AAChC,QAAI,uBAAuB,0BAAE,OAAF,CAAU,QAAV,EAAoB,SAApB,EAA+B,EAA/B,CAA3B;AACA,WAAO,0BAAE,KAAF,CAAQ,oBAAR,EAA8B,GAA9B,CAAP;AACD,GAHD;AAIA,MAAI,SAAS,EAAb;AACA,MAAI,YAAJ;AACA,4BAAE,OAAF,CAAU,eAAV,EAA2B,UAAS,cAAT,EAAyB;AAClD,aAAU,GAAE,MAAO,GAAE,+BAAuB,cAAvB,CAAuC,EAA5D;AACA,mBAAgB,GAAE,kBAAmB,GAAE,MAAO,UAA9C;;AAEA,cAAU,YAAV,IAA0B;AACxB,YAAM,2BADkB;AAExB,kBAAY;AACV,gBADU;AAEV,kBAAU,cAFA;AAGV;AAHU;AAFY,KAA1B;AAQA,eAAW,EAAC,KAAK,YAAN,EAAX;AACD,GAbD;;AAeA,SAAO,YAAP;AACD,CA7BM;;AA+BA,IAAI,0DAAyB,UAAS,QAAT,EAAmB;AACrD,SAAO,0BAAE,UAAF,CAAa,0BAAE,SAAF,CAAY,QAAZ,CAAb,CAAP;AACD,CAFM;;AAIA,IAAI,wDAAwB,UAAS;AAC1C,QAD0C;AAE1C;AAF0C,CAAT,EAGhC;AACD,4BAAE,YAAF,CAAe,MAAf,EAAuB;AACrB,gBAAY;AACV,mBAAa;AACX,2BAAmB;AADR,OADH;AAIV,yBAAmB;AAJT;AADS,GAAvB;;AASA,MAAI,YAAY,OAAO,UAAP,CAAkB,iBAAlC;AACA,MAAI,uBAAuB,OAAO,UAAP,CAAkB,WAAlB,CAA8B,iBAAzD;;AAEA,4BAAE,OAAF,CAAU,OAAV,EAAmB,UAAS,MAAT,EAAiB;AAClC,QAAI,kBAAmB,yBAAwB,MAAO,EAAtD;AACA,QAAI,uBAAwB,wCAAuC,MAAO,EAA1E;;AAEA,cAAU,eAAV,IAA6B,KAA7B;AACA,yBAAqB,oBAArB,IAA6C,eAA7C;AACD,GAND;AAOD,CAvBM","file":"api-gateway.js","sourcesContent":["import _ from 'lodash-firecloud';\n\nexport let addNestedApiResources = function({\n  ParentId,\n  Resources,\n  RestApiId,\n  location,\n  resourceNamePrefix\n}) {\n  let nestedPathParts = (function() {\n    let slashTrimmedLocation = _.replace(location, /^\\/|\\/$/, '');\n    return _.split(slashTrimmedLocation, '/');\n  });\n  let suffix = '';\n  let resourceName;\n  _.forEach(nestedPathParts, function(nestedPathPart) {\n    suffix = `${suffix}${pathPartToResourceName(nestedPathPart)}`;\n    resourceName = `${resourceNamePrefix}${suffix}Resource`;\n\n    Resources[resourceName] = {\n      Type: 'AWS::ApiGateway::Resource',\n      Properties: {\n        ParentId,\n        PathPart: nestedPathPart,\n        RestApiId\n      }\n    };\n    ParentId = {Ref: resourceName};\n  });\n\n  return resourceName;\n};\n\nexport let pathPartToResourceName = function(pathPart) {\n  return _.upperFirst(_.camelCase(pathPart));\n};\n\nexport let xForwardMethodHeaders = function({\n  Method,\n  headers\n}) {\n  _.defaultsDeep(Method, {\n    Properties: {\n      Integration: {\n        RequestParameters: {}\n      },\n      RequestParameters: {}\n    }\n  });\n\n  let reqParams = Method.Properties.RequestParameters;\n  let integrationReqParams = Method.Properties.Integration.RequestParameters;\n\n  _.forforE(headers, function(header) {\n    let methodReqHeader = `method.request.header.${header}`;\n    let integrationReqHeader = `integration.request.header.X-Forward-${header}`;\n\n    reqParams[methodReqHeader] = false;\n    integrationReqParams[integrationReqHeader] = methodReqHeader;\n  });\n};\n"]}