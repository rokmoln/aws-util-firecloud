{"version":3,"sources":["../../src/cfn/lambda.get-code-checksum-variables.ts"],"names":[],"mappings":"uIAAA;AACA;AACA;;AAEA,mC;;;;AAIO,IAAI,wBAAwB,GAAG,gBAAe;AACnD,EAAA,IADmD;AAEnD,EAAA,YAFmD;AAGnD,EAAA,GAHmD;AAInD,EAAA,KAAK,GAAG,KAJ2C,EAAf;AAKnC;AACD,MAAI,oBAAoB,GAAG,IAAI,CAAC,QAAhC;AACA,MAAI,iBAAiB,GAAG,IAAI,CAAC,KAA7B;;AAEA,MAAI;AACF,EAAA,qBADE;AAEF,EAAA,0BAFE;AAGA,cAAM,qBAAiB;AACzB,UAAA,GADyB;AAEzB,UAAA,IAFyB,EAAjB,CAHN,6IAAJ;;;AAQA,MAAI,qBAAqB,GAAG;AAC1B,IAAA,qBAD0B;AAE1B,IAAA,0BAF0B;AAG1B,IAAA,oBAH0B;AAI1B,IAAA,iBAJ0B,EAA5B;;;AAOA,MAAI,KAAJ,EAAW;AACT,WAAO,qBAAP;AACD;;AAED,MAAI,yBAAE,WAAF,CAAc,0BAAd,CAAJ,EAA+C;AAC7C,WAAO,qBAAP;AACD;;AAED,MAAI,aAAJ;;AAEA;AACA,MAAI;AACF,QAAI,MAAM,GAAG,IAAI,gBAAI,MAAR,CAAe,iBAAU,EAAC,GAAD,EAAV,CAAf,CAAb;AACA,KAAC;AACC,MAAA,WAAW,EAAE;AACX,QAAA,SAAS,EAAE,aADA,EADd;;AAIG,gBAAM,MAAM,CAAC,wBAAP,CAAgC;AACxC,YAAA,YADwC,EAAhC;AAEP,UAAA,OAFO,EAJT,gJAAD;AAOD,GATD,CASE,OAAO,GAAP,EAAY;AACZ;AACA,IAAA,OAAO,CAAC,IAAR,CAAa,GAAb,EAAkB;AAChB,MAAA,YADgB,EAAlB;;AAGA,WAAO,qBAAP;AACD;;AAED,MAAI,yBAAE,WAAF,CAAc,aAAa,CAAC,oBAA5B;AACA,2BAAE,WAAF,CAAc,aAAa,CAAC,iBAA5B,CADJ,EACoD;AAClD;AACA,WAAO,qBAAP;AACD;;AAED,MAAI,aAAa,CAAC,0BAAd,KAA6C,0BAAjD,EAA6E;AAC3E;AACA,WAAO,qBAAP;AACD;;AAED;AACA,SAAO,yBAAE,IAAF,CAAO,aAAP,EAAsB;AAC3B,wBAD2B;AAE3B,qBAF2B;AAG3B,yBAH2B;AAI3B,8BAJ2B,CAAtB,CAAP;;AAMD,CAtEM,C","file":"lambda.get-code-checksum-variables.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\nimport getCodeChecksums from './lambda.get-code-checksums';\n\nimport {\n  get as getConfig\n} from '../config';\n\nexport let getCodeChecksumVariables = async function({\n  Code,\n  FunctionName,\n  env,\n  force = false\n}) {\n  let LAMBDA_CODE_S3BUCKET = Code.S3Bucket;\n  let LAMBDA_CODE_S3KEY = Code.S3Key;\n\n  let [\n    LAMBDA_CODE_SHA256SUM,\n    LAMBDA_CODE_SHA256SUM_CORE\n  ] = await getCodeChecksums({\n    env,\n    Code\n  });\n\n  let codeChecksumVariables = {\n    LAMBDA_CODE_SHA256SUM,\n    LAMBDA_CODE_SHA256SUM_CORE,\n    LAMBDA_CODE_S3BUCKET,\n    LAMBDA_CODE_S3KEY\n  };\n\n  if (force) {\n    return codeChecksumVariables;\n  }\n\n  if (_.isUndefined(LAMBDA_CODE_SHA256SUM_CORE)) {\n    return codeChecksumVariables;\n  }\n\n  let liveVariables;\n\n  // check if lambda code is the same as the current version\n  try {\n    let lambda = new aws.Lambda(getConfig({env}));\n    ({\n      Environment: {\n        Variables: liveVariables\n      }\n    } = await lambda.getFunctionConfiguration({\n      FunctionName\n    }).promise());\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.warn(err, {\n      FunctionName\n    });\n    return codeChecksumVariables;\n  }\n\n  if (_.isUndefined(liveVariables.LAMBDA_CODE_S3BUCKET) ||\n      _.isUndefined(liveVariables.LAMBDA_CODE_S3KEY)) {\n    // cannot compare, so update\n    return codeChecksumVariables;\n  }\n\n  if (liveVariables.LAMBDA_CODE_SHA256SUM_CORE !== LAMBDA_CODE_SHA256SUM_CORE) {\n    // change detect, so update\n    return codeChecksumVariables;\n  }\n\n  // no code change detected, so don't update\n  return _.pick(liveVariables, [\n    'LAMBDA_CODE_S3BUCKET',\n    'LAMBDA_CODE_S3KEY',\n    'LAMBDA_CODE_SHA256SUM',\n    'LAMBDA_CODE_SHA256SUM_CORE'\n  ]);\n};\n\nexport default getCodeChecksumVariables;\n"]}