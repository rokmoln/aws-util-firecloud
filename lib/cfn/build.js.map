{"version":3,"sources":["../../src/cfn/build.js"],"names":[],"mappings":";AACA;;AAEA;AACA;;AAEA,sB,8FANA;;;;AAUA,IAAI,iBAAiB,GAAG,UAAS,GAAT,EAAc;AACpC;AACA;AACA;AACA,2BAAE,OAAF,CAAU,yBAAE,MAAF,CAAS,GAAG,CAAC,SAAb,CAAV,EAAmC,UAAS,QAAT,EAAmB;AACpD,QAAI,IAAI,GAAG,yBAAE,MAAF,CAAS,QAAT,EAAmB,oBAAnB,EAAsC,EAAtC,CAAX;AACA;AACA,IAAA,IAAI,GAAG,yBAAE,YAAF,CAAe,IAAf,EAAqB,yBAAE,IAAF,CAAO,GAAG,CAAC,SAAX,CAArB,CAAP;AACA,IAAA,QAAQ,CAAC,SAAT,GAAqB,yBAAE,SAAF,CAAY,QAAQ,CAAC,SAArB,EAAgC,EAAhC,CAArB;AACA,IAAA,QAAQ,CAAC,SAAT,GAAqB,GAAG,MAAH,CAAU,QAAQ,CAAC,SAAnB,EAA8B,MAA9B,CAAqC,IAArC,CAArB;AACA,IAAA,QAAQ,CAAC,SAAT,GAAqB,QAAQ,CAAC,SAAT,CAAmB,MAAnB,GAA4B,QAAQ,CAAC,SAArC,GAAiD,SAAtE;AACD,GAPD;AAQD,CAZD,C;;AAcA,IAAI,gBAAgB,GAAG,UAAS,GAAT,EAAc;AACnC;AACA,2BAAE,OAAF,CAAU,yBAAE,MAAF,CAAS,GAAG,CAAC,SAAb,CAAV,EAAmC,UAAS,QAAT,EAAmB;AACpD,YAAQ,QAAQ,CAAC,IAAjB;AACA,WAAK,yBAAL;AACA,WAAK,uBAAL;AACA,WAAK,uBAAL;AACE,iCAAE,OAAF,CAAU,QAAQ,CAAC,UAAT,CAAoB,cAApB,CAAmC,SAA7C,EAAwD,UAAS,IAAT,EAAe;AACrE,UAAA,IAAI,CAAC,GAAL,GAAW,yBAAE,SAAF,CAAY,IAAI,CAAC,GAAjB,CAAX;AACD,SAFD;AAGA;AACF,WAAK,eAAL;AACE,iCAAE,OAAF,CAAU,QAAQ,CAAC,UAAT,CAAoB,SAApB,CAA8B,SAAxC,EAAmD,UAAS,IAAT,EAAe;AAChE,UAAA,IAAI,CAAC,GAAL,GAAW,yBAAE,SAAF,CAAY,IAAI,CAAC,GAAjB,CAAX;AACD,SAFD;AAGA;AACF,cAbA;;AAeD,GAhBD;AAiBD,CAnBD,C;;AAqBO,IAAI,KAAK,GAAG,gBAAe;AAChC,EAAA,GADgC;AAEhC,EAAA,IAAI,GAAG,EAFyB;AAGhC,EAAA,OAAO,GAAG,KAHsB;AAIhC,EAAA,KAJgC,EAIzB;AACP,EAAA,IALgC,EAAf;AAMhB;AACD,MAAI,GAAG,GAAG,EAAV;;AAEA,iDAAM,OAAO,CAAC,GAAR,CAAY,yBAAE,GAAF,CAAM,IAAN,EAAY,gBAAe,GAAf,EAAoB;AAChD,YAAI,CAAC,cAAK,UAAL,CAAgB,GAAhB,CAAL,EAA2B;AACzB,UAAA,GAAG,GAAG,cAAK,IAAL,CAAU,OAAO,CAAC,GAAR,EAAV,EAAyB,GAAzB,CAAN;AACD;AACD;AACA,YAAI,IAAI,GAAG,OAAO,CAAC,GAAD,CAAP,CAAa,OAAxB;AACA,YAAI,WAAW,4CAAG,MAAM,IAAI,CAAC;AAC3B,cAAA,GAD2B;AAE3B,cAAA,KAF2B;AAG3B,cAAA,IAH2B,EAAD,CAAb,+IAAf;;;AAMA;AACA,QAAA,WAAW,GAAG,yBAAE,OAAF,CAAU,WAAV,IAAyB,WAAzB,GAAuC;AACnD,QAAA,WADmD,CAArD;;;AAIA,iCAAE,KAAF,CAAQ,GAAR,EAAa,GAAG,WAAhB;AACD,OAlBiB,CAAZ,CAAN;;AAoBA,MAAI,CAAC,OAAL,EAAc;AACZ,8BAAkB,GAAlB;AACA,6BAAiB,GAAjB;AACD;;AAED,SAAO,GAAP;AACD,CAnCM,C","file":"build.js","sourcesContent":["// eslint-disable-next-line import/no-unassigned-import\nimport '../bootstrap';\n\nimport _ from 'lodash-firecloud';\nimport path from 'path';\n\nimport {\n  reduceToDependsOn\n} from '.';\n\nlet _surfaceDependsOn = function(tpl) {\n  // CloudFormation behaviour becomes safer (as per AWS support conversations)\n  // if you spell out the DependsOn field, rather than rely on CloudFormation\n  // to imply that based on Refs and Fn::GetAtt...\n  _.forEach(_.pickBy(tpl.Resources), function(Resource) {\n    let deps = _.reduce(Resource, reduceToDependsOn, []);\n    // keep only dependencies on other resources\n    deps = _.intersection(deps, _.keys(tpl.Resources));\n    Resource.DependsOn = _.defaultTo(Resource.DependsOn, []);\n    Resource.DependsOn = [].concat(Resource.DependsOn).concat(deps);\n    Resource.DependsOn = Resource.DependsOn.length ? Resource.DependsOn : undefined;\n  });\n};\n\nlet _standardizeSids = function(tpl) {\n  // CloudFormation does not have consistent rules for Sids (statement ids)\n  _.forEach(_.pickBy(tpl.Resources), function(Resource) {\n    switch (Resource.Type) {\n    case 'AWS::IAM::ManagedPolicy':\n    case 'AWS::S3::BucketPolicy':\n    case 'AWS::SNS::TopicPolicy':\n      _.forEach(Resource.Properties.PolicyDocument.Statement, function(Stmt) {\n        Stmt.Sid = _.camelCase(Stmt.Sid);\n      });\n      break;\n    case 'AWS::KMS::Key':\n      _.forEach(Resource.Properties.KeyPolicy.Statement, function(Stmt) {\n        Stmt.Sid = _.camelCase(Stmt.Sid);\n      });\n      break;\n    default:\n    }\n  });\n};\n\nexport let build = async function({\n  env,\n  incs = [],\n  partial = false,\n  resNs, // used by partial cfns, like lambda cfns\n  vars\n}) {\n  let tpl = {};\n\n  await Promise.all(_.map(incs, async function(inc) {\n    if (!path.isAbsolute(inc)) {\n      inc = path.join(process.cwd(), inc);\n    }\n    // eslint-disable-next-line global-require\n    let main = require(inc).default;\n    let partialTpls = await main({\n      env,\n      resNs,\n      vars\n    });\n\n    // allow the main function to return multiple partial templates\n    partialTpls = _.isArray(partialTpls) ? partialTpls : [\n      partialTpls\n    ];\n\n    _.merge(tpl, ...partialTpls);\n  }));\n\n  if (!partial) {\n    _surfaceDependsOn(tpl);\n    _standardizeSids(tpl);\n  }\n\n  return tpl;\n};\n\nexport default build;\n"]}