{"version":3,"sources":["../../src/cfn/build.js"],"names":[],"mappings":"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","file":"build.js","sourcesContent":["import '../bootstrap';\n\nimport _ from 'lodash-firecloud';\nimport fs from 'fs';\nimport path from 'path';\n\nimport {\n  reduceToDependsOn\n} from '.';\n\nexport let sortedReaddir = async function({dir}) {\n  let files = fs.readdirSync(dir);\n  files = _.sortBy(files);\n  files = _.map(files, function(file) {\n    return path.join(dir, file);\n  });\n  return files;\n};\n\nexport let build = async function({\n  dir,\n  env,\n  incs = [],\n  partial = false,\n  resNs\n}) {\n  let tpl = {};\n\n  if (!_.isUndefined(dir)) {\n    if (fs.existsSync(dir)) {\n      let dirIncs = _.filter(await sortedReaddir({dir}), function(inc) {\n        return /\\.cfn\\.js$/.test(inc);\n      });\n      incs = _.concat(incs, dirIncs);\n    }\n  }\n\n  let vars = {};\n  if (fs.existsSync(`${dir}/vars.js`)) {\n    // eslint-disable-next-line global-require\n    vars = await require(`${dir}/vars.js`).default({env, resNs});\n  }\n\n  await Promise.all(_.map(incs, async function(inc) {\n    if (!path.isAbsolute(inc)) {\n      inc = path.join(process.cwd(), inc);\n    }\n    // eslint-disable-next-line global-require\n    let main = require(inc).default;\n    let partialTpls = await main({\n      env,\n      resNs,\n      vars\n    });\n\n    // allow the main function to return multiple partial templates\n    partialTpls = _.isArray(partialTpls) ? partialTpls : [partialTpls];\n\n    _.merge(tpl, ...partialTpls);\n  }));\n\n  if (!partial) {\n    // CloudFormation behaviour becomes safer (as per AWS support conversations)\n    // if you spell out the DependsOn field, rather than rely on CloudFormation\n    // to imply that based on Refs and Fn::GetAtt...\n    _.forEach(_.pickBy(tpl.Resources), function(Resource) {\n      let deps = _.reduce(Resource, reduceToDependsOn, []);\n      // keep only dependencies on other resources\n      deps = _.intersection(deps, _.keys(tpl.Resources));\n      Resource.DependsOn = _.defaultTo(Resource.DependsOn, []);\n      Resource.DependsOn = [].concat(Resource.DependsOn).concat(deps);\n      Resource.DependsOn = Resource.DependsOn.length ? Resource.DependsOn : undefined;\n    });\n\n    // CloudFormation does not have consistent rules for Sids (statement ids)\n    _.forEach(_.pickBy(tpl.Resources), function(Resource) {\n      switch (Resource.Type) {\n      case 'AWS::IAM::ManagedPolicy':\n      case 'AWS::S3::BucketPolicy':\n      case 'AWS::SNS::TopicPolicy':\n        _.forEach(Resource.Properties.PolicyDocument.Statement, function(Stmt) {\n          Stmt.Sid = _.camelCase(Stmt.Sid);\n        });\n        break;\n      case 'AWS::KMS::Key':\n        _.forEach(Resource.Properties.KeyPolicy.Statement, function(Stmt) {\n          Stmt.Sid = _.camelCase(Stmt.Sid);\n        });\n        break;\n      default:\n      }\n    });\n  }\n\n  return tpl;\n};\n\nexport default build;\n"]}