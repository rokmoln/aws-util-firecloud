{"version":3,"sources":["../../src/cfn/firehose.js"],"names":[],"mappings":"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","file":"firehose.js","sourcesContent":["import _ from 'lodash-firecloud';\n\nimport {\n  get as getPrincipal\n} from '../principal';\n\n// FIXME this needs some serious refactoring\nexport let addFirehoseToS3 = function({\n  BucketName,\n  BufferingHints,\n  CompressionFormat,\n  DeliveryStreamName,\n  Prefix = 'default',\n  Resources,\n  env,\n  resName,\n  LogStreamName,\n  logGroupResName,\n  resNs\n}) {\n  Prefix = _.replace(Prefix, /\\/$/, '');\n  if (_.isUndefined(resName)) {\n    resName = _.upperFirst(_.camelCase(Prefix === 'default' ? '' : Prefix));\n    resName = `${resName}FirehoseToS3`;\n  }\n  let {LogGroupName} = Resources[logGroupResName].Properties;\n  LogStreamName = _.defaultTo(LogStreamName, Prefix);\n\n  let ToS3LS = {\n    DependsOn: [\n      `${resNs}${logGroupResName}`\n    ],\n    Type: 'AWS::Logs::LogStream',\n    Properties: {\n      LogGroupName,\n      LogStreamName\n    }\n  };\n\n  let ToS3PStmts = [];\n\n  ToS3PStmts.push({\n    Sid: 'Allow write access to firehose bucket',\n    Effect: 'Allow',\n    Action: [\n      's3:AbortMultipartUpload',\n      's3:GetBucketLocation',\n      's3:Get*',\n      's3:List*',\n      's3:ListBucketMultipartUploads',\n      's3:PutBucketAcl',\n      's3:PutObject*'\n    ],\n    Resource: [\n      `arn:aws:s3:::${BucketName}`,\n      `arn:aws:s3:::${BucketName}/${Prefix}/*`\n    ]\n  });\n\n  ToS3PStmts.push({\n    Sid: 'Allow write access to error logs',\n    Effect: 'Allow',\n    Action: [\n      'logs:PutLogEvents'\n    ],\n    Resource: [\n      `arn:aws:logs:${env.AWS_REGION}:${env.AWS_ACCOUNT_ID}:log-group:${LogGroupName}:log-stream:${LogStreamName}`\n    ]\n  });\n\n  let ToS3P = {\n    Type: 'AWS::IAM::ManagedPolicy',\n    Properties: {\n      Description: `${env.ENV_NAME}: ${resName} Policy`,\n      PolicyDocument: {\n        Version: '2012-10-17',\n        Statement: ToS3PStmts\n      }\n    }\n  };\n\n  let ToS3R = {\n    Type: 'AWS::IAM::Role',\n    Properties: {\n      AssumeRolePolicyDocument: {\n        Statement: [{\n          Effect: 'Allow',\n          Principal: getPrincipal({\n            env,\n            service: 'firehose'\n          }),\n          Action: 'sts:AssumeRole',\n          Condition: {\n            StringEquals: {\n              'sts:ExternalId': env.AWS_ACCOUNT_ID\n            }\n          }\n        }]\n      },\n      ManagedPolicyArns: [\n        {Ref: `${resNs}${resName}P`}\n      ]\n    }\n  };\n\n  let ToS3 = {\n    DependsOn: [\n      `${resNs}${resName}LS`\n    ],\n    Type: 'AWS::KinesisFirehose::DeliveryStream',\n    Properties: {\n      DeliveryStreamName,\n      S3DestinationConfiguration: {\n        BucketARN: `arn:aws:s3:::${BucketName}`,\n        BufferingHints,\n        CloudWatchLoggingOptions: { // error logging\n          Enabled: true,\n          LogGroupName,\n          LogStreamName\n        },\n        CompressionFormat,\n        EncryptionConfiguration: undefined,\n        Prefix: `${Prefix}/`, // 'YYYY/MM/DD/HH' prefix is implicit\n        RoleARN: {'Fn::GetAtt': [`${resNs}${resName}R`, 'Arn']}\n      }\n    }\n  };\n\n  Resources[`${resName}`] = ToS3;\n  Resources[`${resName}LS`] = ToS3LS;\n  Resources[`${resName}P`] = ToS3P;\n  Resources[`${resName}R`] = ToS3R;\n};\n\nexport default exports;\n"]}