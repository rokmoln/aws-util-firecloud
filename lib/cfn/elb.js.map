{"version":3,"sources":["../../src/cfn/elb.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AAEA;;AAIA;;;;AAIO,IAAI;AAAA,sCAAqB,WAAe,EAAC,GAAD,EAAf,EAAsB;AACpD,QAAI,MAAM,IAAI,iBAAI,GAAR,CAAY,iBAAU,EAAC,GAAD,EAAV,CAAZ,CAAV;;AAEA,QAAI,QAAQ,0BAAE,IAAF,CAAO,CAAC,MAAM,IAAI,cAAJ,CAAmB;AAC3C,eAAS,CAAC;AACR,cAAM,MADE;AAER,gBAAQ,CACN,gDADM;AAFA,OAAD;AADkC,KAAnB,EAOvB,OAPuB,EAAP,EAOL,MAPF,CAAZ;;AASA,WAAO,KAAP;AACD,GAbU;;AAAA;AAAA;AAAA;AAAA,IAAJ;;AAeA,IAAI,0DAAyB,UAAS,GAAT,EAAc,OAAd,EAAuB,SAAvB,EAAkC;AACpE,SAAO,IAAI,MAAJ,CAAW,0BAAE,MAAF,CAAS,OAAT,EAAkB,UAAS,GAAT,EAAc,KAAd,EAAqB,UAArB,EAAiC;AACnE,QAAI,0BAAE,KAAF,CAAQ,KAAR,CAAJ,EAAoB;AAClB,aAAO,GAAP;AACD;AACD;AACA,QAAI,0BAAE,OAAF,CAAU,KAAV,CAAJ,EAAsB;AACpB,UAAI,0BAAE,MAAF,CAAS,KAAT,qBAAgC,MAApC,EAA4C;AAC1C,gBAAQ,MAAM,IAAN,EAAR;AACD;AACF,KAJD,MAIO,IAAI,0BAAE,aAAF,CAAgB,KAAhB,CAAJ,EAA4B;AACjC,UAAI,CAAC,uBAAe,KAAf,CAAL,EAA4B;AAC1B,gBAAQ,KAAK,SAAL,CAAe,KAAf,CAAR;AACD;AACF,KAJM,MAIA,IAAI,0BAAE,QAAF,CAAW,KAAX,KAAqB,0BAAE,QAAF,CAAW,KAAX,CAArB,IAA0C,0BAAE,SAAF,CAAY,KAAZ,CAA9C,EAAkE;AACvE,cAAQ,MAAM,QAAN,EAAR;AACD,KAFM,MAEA;AACL,YAAM,IAAI,KAAJ,CAAU,0BAAE,OAAF,CAAW;;WAEtB,UAAW,eAAc,KAAM,EAFpB,EAEuB,OAFvB,EAEgC,EAFhC,CAAV,CAAN;AAGD;AACD,WAAO,IAAI,MAAJ,CAAW,CAAC;AACjB,eADiB;AAEjB,gBAFiB;AAGjB;AAHiB,KAAD,CAAX,CAAP;AAKD,GAzBiB,EAyBf,EAzBe,CAAX,CAAP;AA0BD,CA3BM","file":"elb.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\nimport {\n  get as getConfig\n} from '../config';\n\nimport {\n  isIntrinsicFun\n} from './';\n\nexport let getLatestNodejsELB = async function({env}) {\n  let ec2 = new aws.EC2(getConfig({env}));\n\n  let image = _.last((await ec2.describeImages({\n    Filters: [{\n      Name: 'name',\n      Values: [\n        'aws-elasticbeanstalk-amzn-*.x86_64-nodejs-pv-*'\n      ]\n    }]\n  }).promise()).Images);\n\n  return image;\n};\n\nexport let reduceToOptionSettings = function(acc, options, Namespace) {\n  return acc.concat(_.reduce(options, function(acc, Value, OptionName) {\n    if (_.isNil(Value)) {\n      return acc;\n    }\n    // Value can only be string\n    if (_.isArray(Value)) {\n      if (_.filter(Value, isIntrinsicFun).length) {\n        Value = Value.join();\n      }\n    } else if (_.isPlainObject(Value)) {\n      if (!isIntrinsicFun(Value)) {\n        Value = JSON.stringify(Value);\n      }\n    } else if (_.isString(Value) || _.isFinite(Value) || _.isBoolean(Value)) {\n      Value = Value.toString();\n    } else {\n      throw new Error(_.replace(`\n        Unsupported type for reduceToBeanstalkOptionSettings:\n        '${OptionName}' was given ${Value}`, /^ +/gm, ''));\n    }\n    return acc.concat([{\n      Namespace,\n      OptionName,\n      Value\n    }]);\n  }, []));\n};\n"]}