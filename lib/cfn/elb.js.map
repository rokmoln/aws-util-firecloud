{"version":3,"sources":["../../src/cfn/elb.js"],"names":[],"mappings":"gJAAA;AACA;;AAEA;;;;AAIA,mC;;;;AAIO,IAAI,kBAAkB,GAAG,gBAAe,EAAC,GAAD,EAAf,EAAsB;AACpD,MAAI,GAAG,GAAG,IAAI,gBAAI,GAAR,CAAY,iBAAU,EAAC,GAAD,EAAV,CAAZ,CAAV;;AAEA,MAAI,KAAK,GAAG,yBAAE,IAAF,CAAO,0CAAC,MAAM,GAAG,CAAC,cAAJ,CAAmB;AAC3C,QAAA,OAAO,EAAE,CAAC;AACR,UAAA,IAAI,EAAE,MADE;AAER,UAAA,MAAM,EAAE;AACN,0DADM,CAFA,EAAD,CADkC,EAAnB;;;AAOvB,MAAA,OAPuB,EAAP,8IAOL,MAPF,CAAZ;;AASA,SAAO,KAAP;AACD,CAbM,C;;AAeA,IAAI,sBAAsB,GAAG,UAAS,GAAT,EAAc,OAAd,EAAuB,SAAvB,EAAkC;AACpE,SAAO,GAAG,CAAC,MAAJ,CAAW,yBAAE,MAAF,CAAS,OAAT,EAAkB,UAAS,GAAT,EAAc,KAAd,EAAqB,UAArB,EAAiC;AACnE,QAAI,yBAAE,KAAF,CAAQ,KAAR,CAAJ,EAAoB;AAClB,aAAO,GAAP;AACD;AACD;AACA,QAAI,yBAAE,OAAF,CAAU,KAAV,CAAJ,EAAsB;AACpB,UAAI,yBAAE,MAAF,CAAS,KAAT,EAAgB,iBAAhB,EAAgC,MAApC,EAA4C;AAC1C,QAAA,KAAK,GAAG,KAAK,CAAC,IAAN,EAAR;AACD;AACF,KAJD,MAIO,IAAI,yBAAE,aAAF,CAAgB,KAAhB,CAAJ,EAA4B;AACjC,UAAI,CAAC,uBAAe,KAAf,CAAL,EAA4B;AAC1B,QAAA,KAAK,GAAG,IAAI,CAAC,SAAL,CAAe,KAAf,CAAR;AACD;AACF,KAJM,MAIA,IAAI,yBAAE,QAAF,CAAW,KAAX,KAAqB,yBAAE,QAAF,CAAW,KAAX,CAArB,IAA0C,yBAAE,SAAF,CAAY,KAAZ,CAA9C,EAAkE;AACvE,MAAA,KAAK,GAAG,KAAK,CAAC,QAAN,EAAR;AACD,KAFM,MAEA;AACL,YAAM,IAAI,KAAJ,CAAU,yBAAE,OAAF,CAAW;;WAEtB,UAAW,eAAc,KAAM,EAFpB,EAEuB,OAFvB,EAEgC,EAFhC,CAAV,CAAN;AAGD;AACD,WAAO,GAAG,CAAC,MAAJ,CAAW,CAAC;AACjB,MAAA,SADiB;AAEjB,MAAA,UAFiB;AAGjB,MAAA,KAHiB,EAAD,CAAX,CAAP;;AAKD,GAzBiB,EAyBf,EAzBe,CAAX,CAAP;AA0BD,CA3BM,C","file":"elb.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\nimport {\n  isIntrinsicFun\n} from '.';\n\nimport {\n  get as getConfig\n} from '../config';\n\nexport let getLatestNodejsELB = async function({env}) {\n  let ec2 = new aws.EC2(getConfig({env}));\n\n  let image = _.last((await ec2.describeImages({\n    Filters: [{\n      Name: 'name',\n      Values: [\n        'aws-elasticbeanstalk-amzn-*.x86_64-nodejs-pv-*'\n      ]\n    }]\n  }).promise()).Images);\n\n  return image;\n};\n\nexport let reduceToOptionSettings = function(acc, options, Namespace) {\n  return acc.concat(_.reduce(options, function(acc, Value, OptionName) {\n    if (_.isNil(Value)) {\n      return acc;\n    }\n    // Value can only be string\n    if (_.isArray(Value)) {\n      if (_.filter(Value, isIntrinsicFun).length) {\n        Value = Value.join();\n      }\n    } else if (_.isPlainObject(Value)) {\n      if (!isIntrinsicFun(Value)) {\n        Value = JSON.stringify(Value);\n      }\n    } else if (_.isString(Value) || _.isFinite(Value) || _.isBoolean(Value)) {\n      Value = Value.toString();\n    } else {\n      throw new Error(_.replace(`\n        Unsupported type for reduceToBeanstalkOptionSettings:\n        '${OptionName}' was given ${Value}`, /^ +/gm, ''));\n    }\n    return acc.concat([{\n      Namespace,\n      OptionName,\n      Value\n    }]);\n  }, []));\n};\n"]}