{"version":3,"sources":["../../src/cfn/lambda.js"],"names":[],"mappings":"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","file":"lambda.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\nimport build from './build';\n\nimport {\n  get as getConfig\n} from '../config';\n\nimport {\n  get as getPrincipal\n} from '../principal';\n\nexport let getCodeChecksum = async function({\n  Code,\n  algorithm = 'sha256',\n  env\n}) {\n  let s3 = new aws.S3(getConfig({env}));\n  let {Body} = await s3.getObject({\n    Bucket: Code.S3Bucket,\n    Key: `${Code.S3Key}.${algorithm}sum`\n  }).promise();\n  Body = Body.toString();\n\n  let checksums = {};\n  _.forEach(_.split(_.trim(Body), '\\n'), function(line) {\n    let [checksum, filename] = _.split(line, '  ');\n    checksums[filename] = checksum;\n  });\n\n  let filename = _.last(_.split(Code.S3Key, '/'));\n\n  return [\n    checksums[`${filename}.info`],\n    checksums[`core.${filename}.info`]\n  ];\n};\n\nexport let add = async function({\n  Code,\n  Resources,\n  cfnDir,\n  config,\n  env,\n  resNs\n}) {\n  let FunctionName =\n      _.replace(config.nameTemplate, '{{.Function.Name}}', config.name);\n\n  let Environment = {\n    Variables: config.environment\n  };\n\n  let partialTpl = await build({\n    env,\n    dir: cfnDir,\n    partial: true,\n    resNs\n  });\n\n  let Lambda = _.get(partialTpl, 'Resources.Lambda');\n  if (Lambda) {\n    delete partialTpl.Resources.Lambda;\n  } else {\n    Lambda = {};\n  }\n\n  // filter out storage resources\n  partialTpl.Resources = _.pickBy(partialTpl.Resources, function(Resource, _ResourceName) {\n    switch (Resource.Type) {\n    case 'AWS::DynamoDB::Table':\n    case 'AWS::Kinesis::DeliveryStream':\n    case 'AWS::Kinesis::Stream':\n    case 'AWS::S3::Bucket':\n      return false;\n    default:\n      return true;\n    }\n  });\n\n  partialTpl.Resources = _.mapKeys(partialTpl.Resources, function(_value, key) {\n    return `${resNs}${key}`;\n  });\n\n  _.merge(Resources, partialTpl.Resources);\n\n  Resources[`${resNs}LambdaL`] = _.defaultTo(Resources[`${resNs}LambdaL`], {\n    DeletionPolicy: 'Delete',\n    Type: 'AWS::Logs::LogGroup',\n    Properties: {\n      LogGroupName: `/aws/lambda/${FunctionName}`,\n      RetentionInDays: 7\n    }\n  });\n\n  let Role = {'Fn::GetAtt': ['LambdaR', 'Arn']};\n\n  if (Resources[`${resNs}LambdaR`]) {\n    Role = {'Fn::GetAtt': [`${resNs}LambdaR`, 'Arn']};\n  }\n\n  let LAMBDA_CODE_S3BUCKET = Code.S3Bucket;\n  let LAMBDA_CODE_S3KEY = Code.S3Key;\n\n  let [\n    LAMBDA_CODE_SHA256SUM,\n    LAMBDA_CODE_SHA256SUM_CORE\n  ] = await exports.getCodeChecksum({\n    env,\n    Code\n  });\n\n  if (LAMBDA_CODE_SHA256SUM_CORE) {\n    // check if lambda code is the same as the current version\n    try {\n      let lambda = new aws.Lambda(getConfig({env}));\n      let {\n        Environment: prevEnvironment\n      } = await lambda.getFunctionConfiguration({\n        FunctionName\n      }).promise();\n\n      let prevCode = {\n        S3Bucket: prevEnvironment.Variables.LAMBDA_CODE_S3BUCKET,\n        S3Key: prevEnvironment.Variables.LAMBDA_CODE_S3KEY\n      };\n\n      let PREV_LAMBDA_CODE_SHA256SUM;\n      let PREV_LAMBDA_CODE_SHA256SUM_CORE;\n\n      try {\n        ([\n          PREV_LAMBDA_CODE_SHA256SUM,\n          PREV_LAMBDA_CODE_SHA256SUM_CORE\n        ] = await exports.getCodeChecksum({\n          env,\n          Code: prevCode\n        }));\n      } catch (err) {\n        if (err.code !== 'NoSuckKey') {\n          throw err;\n        }\n      }\n\n      if (LAMBDA_CODE_SHA256SUM_CORE === PREV_LAMBDA_CODE_SHA256SUM_CORE) {\n        // no real code change, so don't change lambda\n        Code = prevCode;\n        LAMBDA_CODE_SHA256SUM = PREV_LAMBDA_CODE_SHA256SUM;\n        ({\n          LAMBDA_CODE_S3BUCKET,\n          LAMBDA_CODE_S3KEY\n        } = prevEnvironment.Variables);\n      }\n    } catch (_err) {\n      // console.error(_err);\n    }\n  }\n\n  _.merge(Environment.Variables, {\n    APEX_FUNCTION_NAME: config.name, // apex specific\n    LAMBDA_FUNCTION_NAME: FunctionName, // apex specific\n    LAMBDA_CODE_SHA256SUM,\n    LAMBDA_CODE_SHA256SUM_CORE,\n    LAMBDA_CODE_S3BUCKET,\n    LAMBDA_CODE_S3KEY\n  });\n\n  Lambda = _.merge({\n    DependsOn: _.concat([\n      `${resNs}LambdaL`\n    ], _.get(Lambda, 'DependsOn', [])),\n    Type: 'AWS::Lambda::Function',\n    Properties: {\n      Code,\n      Description: config.description,\n      Environment,\n      FunctionName,\n      Handler: config.handler,\n      MemorySize: config.memory,\n      Timeout: config.timeout,\n      Role, // config.role,\n      Runtime: config.runtime\n    }\n  }, Lambda);\n\n  return Lambda;\n};\n\nexport let getStorageResources = async function({\n  cfnDir,\n  env,\n  resNs\n}) {\n  let partialTpl = await build({\n    env,\n    dir: cfnDir,\n    partial: true,\n    resNs\n  });\n\n  // filter storage resources\n  partialTpl.Resources = _.pickBy(partialTpl.Resources, function(Resource, _ResourceName) {\n    switch (Resource.Type) {\n    case 'AWS::DynamoDB::Table':\n    case 'AWS::Kinesis::Stream':\n    case 'AWS::Kinesis::DeliveryStream':\n    case 'AWS::S3::Bucket':\n      break;\n    default:\n      return false;\n    }\n    return true;\n  });\n\n  partialTpl.Resources = _.mapKeys(partialTpl.Resources, function(_value, key) {\n    return `${resNs}${key}`;\n  });\n\n  return partialTpl.Resources;\n};\n\nexport let getPolicyStatement = async function({_env} = {}) {\n  let Statement = [];\n\n  Statement.push({\n    Sid: 'Allow write access to logs',\n    Effect: 'Allow',\n    Action: [\n      'logs:CreateLogGroup',\n      'logs:CreateLogStream',\n      'logs:PutLogEvents'\n    ],\n    Resource: 'arn:aws:logs:*:*:*'\n  });\n\n  return Statement;\n};\n\nexport let getPolicy = async function({env}) {\n  let Policy = {\n    Type: 'AWS::IAM::ManagedPolicy',\n    Properties: {\n      Description: `${env.ENV_NAME}: API Lambda Policy`,\n      PolicyDocument: {\n        Version: '2012-10-17',\n        Statement: exports.getPolicyStatement({env})\n      }\n    }\n  };\n\n  return Policy;\n};\n\nexport let getRole = async function({env}) {\n  let Role = {\n    Type: 'AWS::IAM::Role',\n    Properties: {\n      AssumeRolePolicyDocument: {\n        Statement: [{\n          Effect: 'Allow',\n          Principal: getPrincipal({\n            env,\n            service: 'lambda'\n          }),\n          Action: 'sts:AssumeRole'\n        }]\n      },\n      ManagedPolicyArns: []\n    }\n  };\n\n  return Role;\n};\n\n"]}