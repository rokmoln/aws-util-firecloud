{"version":3,"sources":["../../src/cfn/lambda.js"],"names":[],"mappings":"8SAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,yC;;;;AAIO,IAAI,GAAG,GAAG,eAAV,C;;AAEA,IAAI,wBAAwB,GAAG,gBAA/B,C;;AAEA,IAAI,gBAAgB,GAAG,gBAAvB,C;;AAEA,IAAI,mBAAmB,GAAG,gBAA1B,C;;AAEA,IAAI,kBAAkB,GAAG,UAAS,EAAC,IAAD,KAAS,EAAlB,EAAsB;AACpD,MAAI,SAAS,GAAG,EAAhB;;AAEA,EAAA,SAAS,CAAC,IAAV,CAAe;AACb,IAAA,GAAG,EAAE,4BADQ;AAEb,IAAA,MAAM,EAAE,OAFK;AAGb,IAAA,MAAM,EAAE;AACN,yBADM;AAEN,0BAFM;AAGN,uBAHM,CAHK;;AAQb,IAAA,QAAQ,EAAE,oBARG,EAAf;;;AAWA,SAAO,SAAP;AACD,CAfM,C;;AAiBA,IAAI,SAAS,GAAG,UAAS,EAAC,GAAD,EAAT,EAAgB;AACrC,MAAI,MAAM,GAAG;AACX,IAAA,IAAI,EAAE,yBADK;AAEX,IAAA,UAAU,EAAE;AACV,MAAA,WAAW,EAAG,GAAE,GAAG,CAAC,QAAS,qBADnB;AAEV,MAAA,cAAc,EAAE;AACd,QAAA,OAAO,EAAE,YADK;AAEd,QAAA,SAAS,EAAE,2BAAmB,EAAC,GAAD,EAAnB,CAFG,EAFN,EAFD,EAAb;;;;;AAWA,SAAO,MAAP;AACD,CAbM,C;;AAeA,IAAI,OAAO,GAAG,UAAS,EAAC,GAAD,EAAT,EAAgB;AACnC,MAAI,IAAI,GAAG;AACT,IAAA,IAAI,EAAE,gBADG;AAET,IAAA,UAAU,EAAE;AACV,MAAA,wBAAwB,EAAE;AACxB,QAAA,SAAS,EAAE,CAAC;AACV,UAAA,MAAM,EAAE,OADE;AAEV,UAAA,SAAS,EAAE,oBAAa;AACtB,YAAA,GADsB;AAEtB,YAAA,OAAO,EAAE,QAFa,EAAb,CAFD;;AAMV,UAAA,MAAM,EAAE,gBANE,EAAD,CADa,EADhB;;;AAWV,MAAA,iBAAiB,EAAE,EAXT,EAFH,EAAX;;;;AAiBA,SAAO,IAAP;AACD,CAnBM,C;;AAqBA,IAAI,WAAW,GAAG,UAAS,EAAC,YAAD,EAAe,IAAf,EAAT,EAA+B;AACtD,MAAI,QAAQ,GAAG;AACb,IAAA,cAAc,EAAE,QADH;AAEb,IAAA,IAAI,EAAE,qBAFO;AAGb,IAAA,UAAU,EAAE;AACV,MAAA,YAAY,EAAG,eAAc,YAAa,EADhC;AAEV,MAAA,eAAe,EAAE,CAFP,EAHC,EAAf;;;;AASA,SAAO,QAAP;AACD,CAXM,C;;AAaA,IAAI,cAAc,GAAG,gBAArB,C","file":"lambda.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport _add from './lambda.add';\nimport _getCodeChecksumVariables from './lambda.get-code-checksum-variables';\nimport _getCodeChecksums from './lambda.get-code-checksums';\nimport _getStorageResources from './lambda.get-storage-resources';\nimport _maybeReuseCode from './lambda.maybe-reuse-code';\n\nimport {\n  get as getPrincipal\n} from '../principal';\n\nexport let add = _add;\n\nexport let getCodeChecksumVariables = _getCodeChecksumVariables;\n\nexport let getCodeChecksums = _getCodeChecksums;\n\nexport let getStorageResources = _getStorageResources;\n\nexport let getPolicyStatement = function({_env} = {}) {\n  let Statement = [];\n\n  Statement.push({\n    Sid: 'Allow write access to logs',\n    Effect: 'Allow',\n    Action: [\n      'logs:CreateLogGroup',\n      'logs:CreateLogStream',\n      'logs:PutLogEvents'\n    ],\n    Resource: 'arn:aws:logs:*:*:*'\n  });\n\n  return Statement;\n};\n\nexport let getPolicy = function({env}) {\n  let Policy = {\n    Type: 'AWS::IAM::ManagedPolicy',\n    Properties: {\n      Description: `${env.ENV_NAME}: API Lambda Policy`,\n      PolicyDocument: {\n        Version: '2012-10-17',\n        Statement: getPolicyStatement({env})\n      }\n    }\n  };\n\n  return Policy;\n};\n\nexport let getRole = function({env}) {\n  let Role = {\n    Type: 'AWS::IAM::Role',\n    Properties: {\n      AssumeRolePolicyDocument: {\n        Statement: [{\n          Effect: 'Allow',\n          Principal: getPrincipal({\n            env,\n            service: 'lambda'\n          }),\n          Action: 'sts:AssumeRole'\n        }]\n      },\n      ManagedPolicyArns: []\n    }\n  };\n\n  return Role;\n};\n\nexport let getLogGroup = function({functionName, _env}) {\n  let LogGroup = {\n    DeletionPolicy: 'Delete',\n    Type: 'AWS::Logs::LogGroup',\n    Properties: {\n      LogGroupName: `/aws/lambda/${functionName}`,\n      RetentionInDays: 7\n    }\n  };\n\n  return LogGroup;\n};\n\nexport let maybeReuseCode = _maybeReuseCode;\n"]}