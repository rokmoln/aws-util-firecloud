{"version":3,"sources":["../../src/cfn/index.js"],"names":[],"mappings":";;;;;;;AAAA;;;;;;AAEO,IAAI,0CAAiB,UAAS,KAAT,EAAgB;AAC1C,MAAI,CAAC,0BAAE,aAAF,CAAgB,KAAhB,CAAL,EAA6B;AAC3B,WAAO,KAAP;AACD;AACD,MAAI,OAAO,0BAAE,IAAF,CAAO,KAAP,CAAX;AACA,MAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAO,KAAP;AACD;AACD,SAAO,kBAAiB,IAAjB,CAAsB,KAAK,CAAL,CAAtB;AAAP;AACD,CATM;;AAWA,IAAI,gDAAoB,UAAS,GAAT,EAAc,SAAd,EAAyB;AACtD,MAAI,eAAe,SAAf,CAAJ,EAA+B;AAC7B,QAAI,UAAU,GAAd,EAAmB;AACjB,YAAM,IAAI,MAAJ,CAAW,UAAU,GAArB,CAAN;AACD,KAFD,MAEO,IAAI,UAAU,YAAV,CAAJ,EAA6B;AAClC;AACA,YAAM,IAAI,MAAJ,CAAW,UAAU,YAAV,EAAwB,CAAxB,CAAX,CAAN;AACD,KAHM,MAGA,IAAI,0BAAE,QAAF,CAAW,UAAU,SAAV,CAAX,CAAJ,EAAsC;AAC3C;AACA,UAAI,UAAU,UAAU,SAAV,EAAqB,KAArB,CAA2B,cAA3B,CAAd;AACA,gCAAE,MAAF,CAAS,OAAT,EAAkB,UAAS,MAAT,EAAiB;AACjC,eAAO,YAAW,IAAX,CAAgB,MAAhB;AAAP;AACD,OAFD;AAGA,gCAAE,OAAF,CAAU,OAAV,EAAmB,UAAS,MAAT,EAAiB;AAClC,iBAAS,OAAO,KAAP,CAAa,2BAAb,EAA0C,CAA1C,CAAT;AACA,YAAI,IAAJ,CAAS,MAAT;AACD,OAHD;AAID,KAVM,MAUA,IAAI,0BAAE,OAAF,CAAU,UAAU,SAAV,CAAV,CAAJ,EAAqC;AAC1C;AACA,UAAI,UAAU,UAAU,SAAV,EAAqB,CAArB,EAAwB,KAAxB,CAA8B,cAA9B,CAAd;AACA,gCAAE,MAAF,CAAS,OAAT,EAAkB,UAAS,MAAT,EAAiB;AACjC,eAAO,YAAW,IAAX,CAAgB,MAAhB;AAAP;AACD,OAFD;AAGA,UAAI,UAAU,0BAAE,IAAF,CAAO,UAAU,SAAV,EAAqB,CAArB,CAAP,CAAd;AACA,gBAAU,0BAAE,OAAF,CAAU,OAAV,EAAmB,GAAG,OAAtB,CAAV;AACA,gCAAE,OAAF,CAAU,OAAV,EAAmB,UAAS,MAAT,EAAiB;AAClC,iBAAS,OAAO,KAAP,CAAa,2BAAb,EAA0C,CAA1C,CAAT;AACA,YAAI,IAAJ,CAAS,MAAT;AACD,OAHD;AAID;AACF,GA7BD,MA6BO,IAAI,0BAAE,YAAF,CAAe,SAAf,CAAJ,EAA+B;AACpC,UAAM,IAAI,MAAJ,CAAW,0BAAE,MAAF,CAAS,SAAT,EAAoB,QAAQ,iBAA5B,EAA+C,EAA/C,CAAX,CAAN;AACD;;AAED,SAAO,GAAP;AACD,CAnCM","file":"index.js","sourcesContent":["import _ from 'lodash-firecloud';\n\nexport let isIntrinsicFun = function(Value) {\n  if (!_.isPlainObject(Value)) {\n    return false;\n  }\n  let keys = _.keys(Value);\n  if (keys.length !== 1) {\n    return false;\n  }\n  return /^(Fn::.*|Ref)$/.test(keys[0]);\n};\n\nexport let reduceToDependsOn = function(acc, statement) {\n  if (isIntrinsicFun(statement)) {\n    if (statement.Ref) {\n      acc = acc.concat(statement.Ref);\n    } else if (statement['Fn::GetAtt']) {\n      // {'Fn::GetAtt': ['Ref', 'Att']}\n      acc = acc.concat(statement['Fn::GetAtt'][0]);\n    } else if (_.isString(statement['Fn::Sub'])) {\n      // {'Fn::Sub': `${Ref}`}\n      let subRefs = statement['Fn::Sub'].match(/\\$\\{[^}]+\\}/g);\n      _.remove(subRefs, function(subRef) {\n        return /^AWS::.+/.test(subRef);\n      });\n      _.forEach(subRefs, function(subRef) {\n        subRef = subRef.match(/\\$\\{([^!][^.}]+)(\\..+)?\\}/)[1];\n        acc.push(subRef);\n      });\n    } else if (_.isArray(statement['Fn::Sub'])) {\n      // {'Fn::Sub': [`${Ref}${Var}`, {Var: Value}]}\n      let subRefs = statement['Fn::Sub'][0].match(/\\$\\{[^}]+\\}/g);\n      _.remove(subRefs, function(subRef) {\n        return /^AWS::.+/.test(subRef);\n      });\n      let subVars = _.keys(statement['Fn::Sub'][1]);\n      subRefs = _.without(subRefs, ...subVars);\n      _.forEach(subRefs, function(subRef) {\n        subRef = subRef.match(/\\$\\{([^!][^.}]+)(\\..+)?\\}/)[1];\n        acc.push(subRef);\n      });\n    }\n  } else if (_.isObjectLike(statement)) {\n    acc = acc.concat(_.reduce(statement, exports.reduceToDependsOn, []));\n  }\n\n  return acc;\n};\n"]}