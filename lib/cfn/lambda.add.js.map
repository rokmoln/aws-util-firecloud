{"version":3,"sources":["../../src/cfn/lambda.add.js"],"names":[],"mappings":"kHAAA;AACA,sF;;AAEO,IAAI,GAAG,GAAG,gBAAe;AAC9B,EAAA,IAD8B;AAE9B,EAAA,SAF8B;AAG9B,EAAA,MAH8B;AAI9B,EAAA,MAJ8B;AAK9B,EAAA,GAL8B;AAM9B,EAAA,KAN8B;AAO9B,EAAA,KAAK,GAAG,KAPsB,EAAf;AAQd;AACD,MAAI,YAAY;AACZ,2BAAE,OAAF,CAAU,MAAM,CAAC,YAAjB,EAA+B,oBAA/B,EAAqD,MAAM,CAAC,IAA5D,CADJ;;AAGA;AACA,MAAI,UAAU,4CAAG,MAAM,OAAO,CAAC,MAAD,CAAP,CAAgB,OAAhB,CAAwB;AAC7C,QAAA,GAD6C;AAE7C,QAAA,GAAG,EAAE,MAFwC;AAG7C,QAAA,KAH6C,EAAxB,CAAT,4IAAd;;;AAMA,MAAI,MAAM,GAAG,yBAAE,GAAF,CAAM,UAAN,EAAkB,kBAAlB,CAAb;AACA,MAAI,MAAJ,EAAY;AACV,WAAO,UAAU,CAAC,SAAX,CAAqB,MAA5B;AACD,GAFD,MAEO;AACL,IAAA,MAAM,GAAG,EAAT;AACD;;AAED,2BAAE,KAAF,CAAQ,MAAR,EAAgB;AACd,IAAA,UAAU,EAAE;AACV,MAAA,WAAW,EAAE;AACX,QAAA,SAAS,EAAE,MAAM,CAAC,WAAP,IAAsB,EADtB,EADH,EADE,EAAhB;;;;;AAQA;AACA,EAAA,UAAU,CAAC,SAAX,GAAuB,yBAAE,MAAF,CAAS,UAAU,CAAC,SAApB,EAA+B,UAAS,QAAT,EAAmB,aAAnB,EAAkC;AACtF,YAAQ,QAAQ,CAAC,IAAjB;AACA,WAAK,sBAAL;AACA,WAAK,8BAAL;AACA,WAAK,sBAAL;AACA,WAAK,iBAAL;AACE,eAAO,KAAP;AACF;AACE,eAAO,IAAP,CAPF;;AASD,GAVsB,CAAvB;;AAYA,EAAA,UAAU,CAAC,SAAX,GAAuB,yBAAE,OAAF,CAAU,UAAU,CAAC,SAArB,EAAgC,UAAS,MAAT,EAAiB,GAAjB,EAAsB;AAC3E,WAAQ,GAAE,KAAM,GAAE,GAAI,EAAtB;AACD,GAFsB,CAAvB;;AAIA,2BAAE,KAAF,CAAQ,SAAR,EAAmB,UAAU,CAAC,SAA9B;;AAEA,EAAA,SAAS,CAAE,GAAE,KAAM,SAAV,CAAT,GAA+B,yBAAE,SAAF,CAAY,SAAS,CAAE,GAAE,KAAM,SAAV,CAArB,EAA0C;AACvE,IAAA,cAAc,EAAE,QADuD;AAEvE,IAAA,IAAI,EAAE,qBAFiE;AAGvE,IAAA,UAAU,EAAE;AACV,MAAA,YAAY,EAAG,eAAc,YAAa,EADhC;AAEV,MAAA,eAAe,EAAE,CAFP,EAH2D,EAA1C,CAA/B;;;;AASA,MAAI,IAAI,GAAG;AACT,kBAAc;AACZ,aADY;AAEZ,SAFY,CADL,EAAX;;;;AAOA,MAAI,SAAS,CAAE,GAAE,KAAM,SAAV,CAAb,EAAkC;AAChC,IAAA,IAAI,GAAG;AACL,oBAAc;AACX,SAAE,KAAM,SADG;AAEZ,WAFY,CADT,EAAP;;;AAMD;;AAED,MAAI,SAAS,GAAG;AACd,IAAA,kBAAkB,EAAE,MAAM,CAAC,IADb,EACmB;AACjC,IAAA,oBAAoB,EAAE,YAFR,CAEqB;AAFrB,GAAhB;;AAKA,MAAI,qBAAqB,4CAAG,MAAM,qBAAyB;AACzD,QAAA,IADyD;AAEzD,QAAA,YAFyD;AAGzD,QAAA,GAHyD;AAIzD,QAAA,KAJyD,EAAzB,CAAT,+IAAzB;;AAMA,2BAAE,KAAF,CAAQ,SAAR,EAAmB,qBAAnB;;AAEA,EAAA,MAAM,GAAG,yBAAE,KAAF,CAAQ;AACf,IAAA,SAAS,EAAE,yBAAE,MAAF,CAAS;AACjB,OAAE,KAAM,SADS,CAAT;AAER,6BAAE,GAAF,CAAM,MAAN,EAAc,WAAd,EAA2B,EAA3B,CAFQ,CADI;AAIf,IAAA,IAAI,EAAE,uBAJS;AAKf,IAAA,UAAU,EAAE;AACV,MAAA,IADU;AAEV,MAAA,WAAW,EAAE,MAAM,CAAC,WAFV;AAGV,MAAA,YAHU;AAIV,MAAA,OAAO,EAAE,MAAM,CAAC,OAJN;AAKV,MAAA,UAAU,EAAE,MAAM,CAAC,MALT;AAMV,MAAA,OAAO,EAAE,MAAM,CAAC,OANN;AAOV,MAAA,IAPU,EAOJ;AACN,MAAA,OAAO,EAAE,MAAM,CAAC,OARN;AASV,MAAA,WAAW,EAAE;AACX,QAAA,SADW,EATH,EALG,EAAR;;;AAkBN,EAAA,MAlBM,CAAT;;AAoBA,SAAO,MAAP;AACD,CAhHM,C","file":"lambda.add.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport getCodeChecksumVariables from './lambda.get-code-checksum-variables';\n\nexport let add = async function({\n  Code,\n  Resources,\n  cfnDir,\n  config,\n  env,\n  resNs,\n  force = false\n}) {\n  let FunctionName =\n      _.replace(config.nameTemplate, '{{.Function.Name}}', config.name);\n\n  // eslint-disable-next-line global-require\n  let partialTpl = await require(cfnDir).default({\n    env,\n    dir: cfnDir,\n    resNs\n  });\n\n  let Lambda = _.get(partialTpl, 'Resources.Lambda');\n  if (Lambda) {\n    delete partialTpl.Resources.Lambda;\n  } else {\n    Lambda = {};\n  }\n\n  _.merge(Lambda, {\n    Properties: {\n      Environment: {\n        Variables: config.environment || {}\n      }\n    }\n  });\n\n  // filter out storage resources\n  partialTpl.Resources = _.pickBy(partialTpl.Resources, function(Resource, _ResourceName) {\n    switch (Resource.Type) {\n    case 'AWS::DynamoDB::Table':\n    case 'AWS::Kinesis::DeliveryStream':\n    case 'AWS::Kinesis::Stream':\n    case 'AWS::S3::Bucket':\n      return false;\n    default:\n      return true;\n    }\n  });\n\n  partialTpl.Resources = _.mapKeys(partialTpl.Resources, function(_value, key) {\n    return `${resNs}${key}`;\n  });\n\n  _.merge(Resources, partialTpl.Resources);\n\n  Resources[`${resNs}LambdaL`] = _.defaultTo(Resources[`${resNs}LambdaL`], {\n    DeletionPolicy: 'Delete',\n    Type: 'AWS::Logs::LogGroup',\n    Properties: {\n      LogGroupName: `/aws/lambda/${FunctionName}`,\n      RetentionInDays: 7\n    }\n  });\n\n  let Role = {\n    'Fn::GetAtt': [\n      'LambdaR',\n      'Arn'\n    ]\n  };\n\n  if (Resources[`${resNs}LambdaR`]) {\n    Role = {\n      'Fn::GetAtt': [\n        `${resNs}LambdaR`,\n        'Arn'\n      ]\n    };\n  }\n\n  let Variables = {\n    APEX_FUNCTION_NAME: config.name, // apex specific\n    LAMBDA_FUNCTION_NAME: FunctionName // apex specific\n  };\n\n  let codeChecksumVariables = await getCodeChecksumVariables({\n    Code,\n    FunctionName,\n    env,\n    force\n  });\n  _.merge(Variables, codeChecksumVariables);\n\n  Lambda = _.merge({\n    DependsOn: _.concat([\n      `${resNs}LambdaL`\n    ], _.get(Lambda, 'DependsOn', [])),\n    Type: 'AWS::Lambda::Function',\n    Properties: {\n      Code,\n      Description: config.description,\n      FunctionName,\n      Handler: config.handler,\n      MemorySize: config.memory,\n      Timeout: config.timeout,\n      Role, // config.role,\n      Runtime: config.runtime,\n      Environment: {\n        Variables\n      }\n    }\n  }, Lambda);\n\n  return Lambda;\n};\n\nexport default add;\n"]}