{"version":3,"sources":["../src/account.ts"],"names":[],"mappings":"2JAAA;AACA,oD;;;;;;;AAOO,IAAI,GAAG,GAAG,UAAS,EAAC,GAAD,EAAT;;AAEa;AAC5B,MAAI,gBAAgB,GAAG,yBAAE,MAAF,CAAS,yBAAE,IAAF,CAAO,GAAP,CAAT,EAAsB,UAAS,OAAT,EAAkB;AAC7D,WAAO,yBAAE,QAAF,CAAW,OAAX,EAAoB,iBAApB,CAAP;AACD,GAFsB,CAAvB;AAGA,MAAI,QAAQ,GAAG,EAAf;;AAEA,2BAAE,OAAF,CAAU,gBAAV,EAA4B,UAAS,eAAT,EAA0B;AACpD,QAAI,MAAM,GAAG,yBAAE,OAAF,CAAU,eAAV,EAA2B,kBAA3B,EAA+C,EAA/C,CAAb;AACA,QAAI,IAAI,GAAG,yBAAE,OAAF,CAAU,MAAV,CAAX;AACA,QAAI,EAAE,GAAG,GAAG,CAAC,eAAD,CAAZ;;AAEA,QAAI,OAAO,GAAG;AACZ,MAAA,IADY;AAEZ,MAAA,EAFY,EAAd;;;AAKA,QAAI,eAAe,GAAG,yBAAE,MAAF,CAAS,GAAT,EAAc,UAAS,MAAT,EAAiB,GAAjB,EAAsB;AACxD,aAAO,yBAAE,UAAF,CAAa,GAAb,EAAmB,GAAE,MAAO,GAA5B,CAAP;AACD,KAFqB,CAAtB;AAGA,IAAA,eAAe,GAAG,yBAAE,OAAF,CAAU,eAAV,EAA2B,UAAS,MAAT,EAAiB,GAAjB,EAAsB;AACjE,aAAO,yBAAE,OAAF,CAAU,GAAV,EAAe,IAAI,MAAJ,CAAY,IAAG,MAAO,GAAtB,CAAf,EAA0C,EAA1C,CAAP;AACD,KAFiB,CAAlB;AAGA,6BAAE,KAAF,CAAQ,OAAR,EAAiB,eAAjB;;AAEA,IAAA,OAAO,CAAC,EAAR,GAAa,yBAAE,KAAF,CAAQ,yBAAE,SAAF,CAAY,OAAO,CAAC,EAApB,EAA6C,EAA7C,CAAR,EAA0D,GAA1D,CAAb;;AAEA,IAAA,OAAO,GAAG,OAAV;AACA,IAAA,QAAQ,CAAC,EAAD,CAAR,GAAe,OAAf;AACA,IAAA,QAAQ,CAAC,MAAD,CAAR,GAAmB,OAAnB;AACA,IAAA,QAAQ,CAAC,IAAD,CAAR,GAAiB,OAAjB;AACD,GAxBD;;AA0BA,2BAAE,MAAF,CAAS,QAAT,EAAmB,QAAQ,CAAC,GAAG,CAAC,cAAL,CAA3B;;AAEA,SAAO,QAAP;AACD,CArCM,C;;AAuCA,IAAI,OAAO,GAAG,EAAd;;AAEP;AACA;0BACO,IAAI,YAAY,GAAG,IAAI,KAAJ,kBAAmB;AAC3C,EAAA,GAAG,EAAE,UAAS,MAAT,EAAiB,QAAjB,EAA2B,SAA3B,EAAsC;AACzC,IAAA,QAAQ,GAAG,QAAX;AACA,QAAI,yBAAE,OAAF,iBAAJ,EAAwB;AACtB,+BAAE,KAAF,kBAAiB,YAAI,EAAC,GAAG,EAAH,YAAD,EAAJ,CAAjB;AACD;;AAED,WAAO,MAAM,CAAC,QAAD,CAAb;AACD,GAR0C,EAAnB,CAAnB,C","file":"account.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport env from './env';\n\nimport {\n  Account,\n  Env\n} from './types';\n\nexport let get = function({env}: {\n  env: Env;\n}): {[key: string]: Account;} {\n  let awsAccountIdVars = _.filter(_.keys(env), function(varName) {\n    return _.endsWith(varName, '_AWS_ACCOUNT_ID');\n  });\n  let accounts = {};\n\n  _.forEach(awsAccountIdVars, function(awsAccountIdVar) {\n    let prefix = _.replace(awsAccountIdVar, /_AWS_ACCOUNT_ID$/, '');\n    let NAME = _.toLower(prefix);\n    let ID = env[awsAccountIdVar];\n\n    let account = {\n      NAME,\n      ID\n    } as Partial<Account>;\n\n    let prefixedEnvVars = _.pickBy(env, function(_value, key) {\n      return _.startsWith(key, `${prefix}_`);\n    });\n    prefixedEnvVars = _.mapKeys(prefixedEnvVars, function(_value, key) {\n      return _.replace(key, new RegExp(`^${prefix}_`), '');\n    });\n    _.merge(account, prefixedEnvVars);\n\n    account.NS = _.split(_.defaultTo(account.NS as unknown as string, ''), ',');\n\n    account = account as Account;\n    accounts[ID] = account;\n    accounts[prefix] = account;\n    accounts[NAME] = account;\n  });\n\n  _.assign(accounts, accounts[env.AWS_ACCOUNT_ID]);\n\n  return accounts;\n};\n\nexport let current = {} as Env;\n\n// lazy init\n// eslint-disable-next-line fp/no-proxy\nexport let currentProxy = new Proxy(current, {\n  get: function(target, property, _receiver) {\n    property = property as Exclude<typeof property, symbol>;\n    if (_.isEmpty(current)) {\n      _.merge(current, get({env}));\n    }\n\n    return target[property];\n  }\n});\n\nexport default currentProxy;\n"]}