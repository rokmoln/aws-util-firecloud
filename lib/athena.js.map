{"version":3,"sources":["../src/athena.js"],"names":[],"mappings":"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","file":"athena.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\nimport {\n  get as getRegion\n} from './region';\n\nexport let getDatabaseName = function({\n  region,\n  env\n}) {\n  region = _.defaultTo(region, getRegion({env}));\n\n  let name = `${env.ENV_NAME}-${env.PROJECT_DOMAIN_NAME}-${region}`;\n  name = _.toLower(name);\n  name = _.replace(name, /[^a-z0-9-]/g, '_');\n  name = _.replace(name, /-+/g, '_');\n\n  return name;\n};\n\nexport let getOutputBucketName = function({\n  region,\n  env\n}) {\n  region = _.defaultTo(region, getRegion({env}));\n\n  let name = `aws-athena-query-results-${env.AWS_ACCOUNT_ID}-${region}`;\n\n  return name;\n};\n\nexport let pollQueryCompletedState = async function(args) {\n  _.defaults(args, {\n    pollingDelay: 1000\n  });\n  let {\n    athena,\n    QueryExecutionId,\n    pollingDelay\n  } = args;\n  let data = await athena.getQueryExecution({QueryExecutionId}).promise();\n  let state = data.QueryExecution.Status.State;\n  if (state === 'RUNNING' || state === 'QUEUED' || state === 'SUBMITTED') {\n    await _.sleep(pollingDelay);\n\n    return await pollQueryCompletedState(args);\n  }\n\n  return state;\n};\n\nexport let queryResultToObjectsArray = function(queryResult) {\n  let columnInfo = queryResult.ResultSet.ResultSetMetadata.ColumnInfo;\n  let columns = _.map(columnInfo, function(column) {\n    return _.pick(column, [\n      'Name',\n      'Type'\n    ]);\n  });\n\n  let rows = queryResult.ResultSet.Rows;\n  let rowsObjects = _.map(rows, function(row) {\n    let rowObject = {};\n\n    _.forEach(columns, function(column, columnIndex) {\n      let value = _.get(row, `Data[${columnIndex}].VarCharValue`);\n\n      if (_.isDefined(value)) {\n        switch (_.toLower(column.Type)) {\n        case ('integer'):\n        case ('tinyint'):\n        case ('smallint'):\n        case ('bigint'):\n        case ('double'):\n          value = Number(value);\n          break;\n        case ('boolean'):\n          value = Boolean(value);\n          break;\n        default:\n          break;\n        }\n      }\n\n      rowObject[column.Name] = value;\n    });\n\n    return rowObject;\n  });\n\n  return rowsObjects;\n};\n\nexport let queryResultToText = function(queryResult) {\n  let rows = queryResult.ResultSet.Rows;\n  let lines = _.map(rows, 'Data[0].VarCharValue');\n  return _.join(lines, '\\n');\n};\n\nexport let queryResultIsShowResult = function(queryResult) {\n  let showColumnSets = [\n    [\n      'createtab_stmt'\n    ],\n    [\n      'tab_name'\n    ],\n    [\n      'database_name'\n    ],\n    [\n      'partition'\n    ],\n    [\n      'field'\n    ],\n    [\n      'prpt_name',\n      'prpt_value'\n    ]\n  ];\n\n  let columnInfo = queryResult.ResultSet.ResultSetMetadata.ColumnInfo;\n\n  return _.some(showColumnSets, function(columnSet) {\n    return columnInfo.length === columnSet.length &&\n      _.every(columnInfo, function(column) {\n        return column.Name === column.Label &&\n              column.Type === 'string' &&\n              _.includes(columnSet, column.Name);\n      });\n  });\n};\n\nexport let executeQuery = async function({\n  athena = new aws.Athena(),\n  params = {\n    QueryString: '',\n    ResultConfiguration: {\n      OutputLocation: 's3://aws-athena-query-results-094611745175-eu-west-1/'\n    }\n  },\n  pollingDelay = 1000,\n  initPollingDelay = pollingDelay\n}) {\n  let queryExecutionData = await athena.startQueryExecution(params).promise();\n  let {\n    QueryExecutionId\n  } = queryExecutionData;\n\n  await _.sleep(initPollingDelay);\n  let status = await pollQueryCompletedState({\n    athena,\n    QueryExecutionId,\n    pollingDelay\n  });\n\n  if (status !== 'SUCCEEDED') {\n    throw Error(\"Athena: query didn't succeed.\");\n  }\n\n  let queryResult;\n  let nextToken;\n  let rows = [];\n  do {\n    queryResult = await athena.getQueryResults({QueryExecutionId, NextToken: nextToken}).promise();\n\n    // checking if the query is a result of SHOW query\n    // returing just text in this case, not trying to parse columns and rows\n    if (queryResultIsShowResult(queryResult)) {\n      return queryResultToText(queryResult);\n    }\n\n    nextToken = queryResult.NextToken;\n\n    rows = rows.concat(queryResultToObjectsArray(queryResult));\n  } while (nextToken);\n\n  rows = _.drop(rows, 1); // first row is column names\n  return rows;\n};\n\nexport default exports;\n"]}