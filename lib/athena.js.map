{"version":3,"sources":["../src/athena.js"],"names":[],"mappings":"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","file":"athena.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\nimport {\n  get as getRegion\n} from './region';\n\nexport let getDatabaseName = function({\n  region,\n  env\n}) {\n  region = _.defaultTo(region, getRegion({env}));\n\n  let name = `${env.ENV_NAME}-${env.PROJECT_DOMAIN_NAME}-${region}`;\n  name = _.toLower(name);\n  name = _.replace(name, /[^a-z0-9-]/g, '_');\n  name = _.replace(name, /-+/g, '_');\n\n  return name;\n};\n\nexport let getOutputBucketName = function({\n  region,\n  env\n}) {\n  region = _.defaultTo(region, getRegion({env}));\n\n  let name = `aws-athena-query-results-${env.AWS_ACCOUNT_ID}-${region}`;\n\n  return name;\n};\n\nexport let pollQueryCompletedState = async function({\n  athena,\n  QueryExecutionId,\n  pollingDelay = 1000\n}) {\n  let data = await athena.getQueryExecution({QueryExecutionId}).promise();\n  let state = data.QueryExecution.Status.State;\n  if (state === 'RUNNING' || state === 'QUEUED' || state === 'SUBMITTED') {\n    await _.sleep(pollingDelay);\n\n    // eslint-disable-next-line fp/no-arguments\n    return await pollQueryCompletedState(...arguments);\n  }\n\n  return state;\n};\n\nexport let queryResultToObjectsArray = function(queryResult) {\n  let columnInfo = queryResult.ResultSet.ResultSetMetadata.ColumnInfo;\n  let columns = _.map(columnInfo, function(column) {\n    return _.pick(column, ['Name', 'Type']);\n  });\n\n  let rows = queryResult.ResultSet.Rows;\n  let rowsObjects = _.map(rows, function(row) {\n    let rowObject = {};\n\n    _.forEach(columns, function(column, columnIndex) {\n      let value = row.Data[columnIndex].VarCharValue;\n\n      if (!_.isUndefined(value)) {\n        switch (_.toLower(column.Type)) {\n        case ('integer'):\n        case ('tinyint'):\n        case ('smallint'):\n        case ('bigint'):\n        case ('double'):\n          value = Number(value);\n          break;\n        case ('boolean'):\n          value = Boolean(value);\n          break;\n        default:\n          break;\n        }\n      }\n\n      rowObject[column.Name] = value;\n    });\n\n    return rowObject;\n  });\n\n  return rowsObjects;\n};\n\nexport let queryResultToText = function(queryResult) {\n  let rows = queryResult.ResultSet.Rows;\n  let lines = _.map(rows, 'Data[0].VarCharValue');\n  return _.join(lines, '\\n');\n};\n\nexport let queryResultIsText = function(queryResult) {\n  let columnInfo = queryResult.ResultSet.ResultSetMetadata.ColumnInfo;\n  if (columnInfo.length === 1 &&\n    columnInfo[0].Name === 'createtab_stmt' &&\n    columnInfo[0].Label === 'createtab_stmt' &&\n    columnInfo[0].Type === 'string') {\n    return true;\n  }\n\n  if (columnInfo.length === 1 &&\n    columnInfo[0].Name === 'tab_name' &&\n    columnInfo[0].Label === 'tab_name' &&\n    columnInfo[0].Type === 'string') {\n    return true;\n  }\n\n  return false;\n};\n\nexport let executeQuery = async function({\n  athena = new aws.Athena({apiVersion: '2017-05-18'}),\n  params = {\n    QueryString: '',\n    ResultConfiguration: {\n      OutputLocation: 's3://aws-athena-query-results-094611745175-eu-west-1/'\n    }\n  },\n  pollingDelay = 1000,\n  initPollingDelay = pollingDelay\n}) {\n  let queryExecutionData = await athena.startQueryExecution(params).promise();\n  let {QueryExecutionId} = queryExecutionData;\n\n  await _.sleep(initPollingDelay);\n  let status = await pollQueryCompletedState({\n    athena,\n    QueryExecutionId,\n    pollingDelay\n  });\n\n  if (status !== 'SUCCEEDED') {\n    throw Error(\"Athena: query didn't succeed.\");\n  }\n\n  let queryResult = await athena.getQueryResults({QueryExecutionId}).promise();\n\n  if (queryResultIsText(queryResult)) {\n    return queryResultToText(queryResult);\n  }\n\n  let resultObject = queryResultToObjectsArray(queryResult);\n  resultObject = _.drop(resultObject, 1); // first row is column names\n  return resultObject;\n};\n\nexport default exports;\n"]}