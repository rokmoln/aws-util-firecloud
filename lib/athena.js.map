{"version":3,"sources":["../src/athena.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AAIO,IAAI;AAAA,sCAA0B,WAAe;AAClD,UADkD;AAElD,oBAFkD;AAGlD,mBAAe;AAHmC,GAAf,EAIlC;AACD,QAAI,OAAO,MAAM,OAAO,iBAAP,CAAyB,EAAC,gBAAD,EAAzB,EAA6C,OAA7C,EAAjB;AACA,QAAI,QAAQ,KAAK,cAAL,CAAoB,MAApB,CAA2B,KAAvC;AACA,QAAI,UAAU,SAAV,IAAuB,UAAU,QAAjC,IAA6C,UAAU,WAA3D,EAAwE;AACtE,YAAM,sBAAM,YAAN,CAAN;;AAEA;AACA,aAAO,MAAM,wBAAwB,GAAG,SAA3B,CAAb;AACD;;AAED,WAAO,KAAP;AACD,GAfU;;AAAA;AAAA;AAAA;AAAA,IAAJ;;AAiBA,IAAI,gEAA4B,UAAS,WAAT,EAAsB;AAC3D,MAAI,aAAa,YAAY,SAAZ,CAAsB,iBAAtB,CAAwC,UAAzD;AACA,MAAI,eAAe,0BAAE,GAAF,CAAM,UAAN,EAAkB,MAAlB,CAAnB;;AAEA,MAAI,OAAO,YAAY,SAAZ,CAAsB,IAAjC;AACA,MAAI,cAAc,0BAAE,GAAF,CAAM,IAAN,EAAY,UAAS,GAAT,EAAc;AAC1C,QAAI,YAAY,EAAhB;;AAEA,8BAAE,OAAF,CAAU,YAAV,EAAwB,UAAS,UAAT,EAAqB,WAArB,EAAkC;AACxD,gBAAU,UAAV,IAAwB,IAAI,IAAJ,CAAS,WAAT,EAAsB,YAA9C;AACD,KAFD;;AAIA,WAAO,SAAP;AACD,GARiB,CAAlB;;AAUA,SAAO,WAAP;AACD,CAhBM;;AAkBA,IAAI;AAAA,uCAAe,WAAe;AACvC,aAAS,IAAI,iBAAI,MAAR,CAAe,EAAC,YAAY,YAAb,EAAf,CAD8B;AAEvC,aAAS;AACP,mBAAa,EADN;AAEP,2BAAqB;AACnB,wBAAgB;AADG;AAFd,KAF8B;AAQvC,mBAAe,IARwB;AASvC,uBAAmB;AAToB,GAAf,EAUvB;AACD,QAAI,qBAAqB,MAAM,OAAO,mBAAP,CAA2B,MAA3B,EAAmC,OAAnC,EAA/B;AACA,QAAI,EAAC,gBAAD,KAAqB,kBAAzB;;AAEA,UAAM,sBAAM,gBAAN,CAAN;AACA,QAAI,SAAS,MAAM,wBAAwB;AACzC,YADyC;AAEzC,sBAFyC;AAGzC;AAHyC,KAAxB,CAAnB;;AAMA,QAAI,WAAW,WAAf,EAA4B;AAC1B,YAAM,MAAM,+BAAN,CAAN;AACD;;AAED,QAAI,cAAc,MAAM,OAAO,eAAP,CAAuB,EAAC,gBAAD,EAAvB,EAA2C,OAA3C,EAAxB;AACA,QAAI,eAAe,0BAA0B,WAA1B,CAAnB;AACA,mBAAe,0BAAE,IAAF,CAAO,YAAP,EAAqB,CAArB,CAAf,CAjBC,CAiBuC;AACxC,WAAO,YAAP;AACD,GA7BU;;AAAA;AAAA;AAAA;AAAA,IAAJ;;kBA+BQ,O","file":"athena.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\nimport {\n  delay\n} from 'bluebird';\n\nexport let pollQueryCompletedState = async function({\n  athena,\n  QueryExecutionId,\n  pollingDelay = 1000\n}) {\n  let data = await athena.getQueryExecution({QueryExecutionId}).promise();\n  let state = data.QueryExecution.Status.State;\n  if (state === 'RUNNING' || state === 'QUEUED' || state === 'SUBMITTED') {\n    await delay(pollingDelay);\n\n    // eslint-disable-next-line fp/no-arguments\n    return await pollQueryCompletedState(...arguments);\n  }\n\n  return state;\n};\n\nexport let queryResultToObjectsArray = function(queryResult) {\n  let columnInfo = queryResult.ResultSet.ResultSetMetadata.ColumnInfo;\n  let columnsNames = _.map(columnInfo, 'Name');\n\n  let rows = queryResult.ResultSet.Rows;\n  let rowsObjects = _.map(rows, function(row) {\n    let rowObject = {};\n\n    _.forEach(columnsNames, function(columnName, columnIndex) {\n      rowObject[columnName] = row.Data[columnIndex].VarCharValue;\n    });\n\n    return rowObject;\n  });\n\n  return rowsObjects;\n};\n\nexport let executeQuery = async function({\n  athena = new aws.Athena({apiVersion: '2017-05-18'}),\n  params = {\n    QueryString: '',\n    ResultConfiguration: {\n      OutputLocation: 's3://aws-athena-query-results-094611745175-eu-west-1/'\n    }\n  },\n  pollingDelay = 1000,\n  initPollingDelay = pollingDelay\n}) {\n  let queryExecutionData = await athena.startQueryExecution(params).promise();\n  let {QueryExecutionId} = queryExecutionData;\n\n  await delay(initPollingDelay);\n  let status = await pollQueryCompletedState({\n    athena,\n    QueryExecutionId,\n    pollingDelay\n  });\n\n  if (status !== 'SUCCEEDED') {\n    throw Error(\"Athena: query didn't succeed.\");\n  }\n\n  let queryResult = await athena.getQueryResults({QueryExecutionId}).promise();\n  let resultObject = queryResultToObjectsArray(queryResult);\n  resultObject = _.drop(resultObject, 1); // first row is column names\n  return resultObject;\n};\n\nexport default exports;\n"]}