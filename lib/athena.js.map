{"version":3,"sources":["../src/athena.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AAKA,IAAI;AAAA,sCAA2B,WAAe;AAC5C,oBAD4C;AAE5C,0BAF4C;AAG5C;AAH4C,GAAf,EAI5B;AACD,QAAI,OAAO,MAAM,uBAAuB,EAAC,gBAAD,EAAvB,CAAjB;AACA,QAAI,QAAQ,KAAK,cAAL,CAAoB,MAApB,CAA2B,KAAvC;AACA,QAAI,UAAU,SAAV,IAAuB,UAAU,QAArC,EAA+C;AAC7C,YAAM,sBAAM,YAAN,CAAN;;AAEA;AACA,aAAO,MAAM,yBAAyB,GAAG,SAA5B,CAAb;AACD;;AAED,WAAO,KAAP;AACD,GAfG;;AAAA;AAAA;AAAA;AAAA,IAAJ;;AAiBA,IAAI,uBAAuB,UAAS,WAAT,EAAsB;AAC/C,MAAI,eAAe,EAAnB;AACA,4BAAE,OAAF,CAAU,YAAY,SAAZ,CAAsB,IAAtB,CAA2B,CAA3B,EAA8B,IAAxC,EAA8C,UAAS,KAAT,EAAgB,KAAhB,EAAuB;AACnE,iBAAa,KAAb,IAAsB,MAAM,YAA5B;AACD,GAFD;;AAIA,MAAI,OAAO,0BAAE,IAAF,CAAO,YAAY,SAAZ,CAAsB,IAA7B,EAAmC,CAAnC,CAAX;AACA,MAAI,cAAc,0BAAE,GAAF,CAAM,IAAN,EAAY,UAAS,GAAT,EAAc;AAC1C,QAAI,YAAY,EAAhB;;AAEA,8BAAE,OAAF,CAAU,YAAV,EAAwB,UAAS,UAAT,EAAqB,WAArB,EAAkC;AACxD,gBAAU,UAAV,IAAwB,IAAI,IAAJ,CAAS,WAAT,EAAsB,YAA9C;AACD,KAFD;;AAIA,WAAO,SAAP;AACD,GARiB,CAAlB;;AAUA,SAAO,WAAP;AACD,CAlBD;;AAoBO,IAAI;AAAA,uCAAe,WAAe;AACvC,aAAS,IAAI,iBAAI,MAAR,CAAe,EAAC,YAAY,YAAb,EAAf,CAD8B;AAEvC,aAAS;AACP,mBAAa,EADN;AAEP,2BAAqB;AACnB,wBAAgB;AADG;AAFd,KAF8B;AAQvC,mBAAe,IARwB;AASvC,uBAAmB;AAToB,GAAf,EAUvB;AACD,QAAI,2BAA2B,0BAAU,OAAO,mBAAjB,EAAsC,EAAC,SAAS,MAAV,EAAtC,CAA/B;AACA,QAAI,yBAAyB,0BAAU,OAAO,iBAAjB,EAAoC,EAAC,SAAS,MAAV,EAApC,CAA7B;AACA,QAAI,uBAAuB,0BAAU,OAAO,eAAjB,EAAkC,EAAC,SAAS,MAAV,EAAlC,CAA3B;;AAEA,QAAI,qBAAqB,MAAM,yBAAyB,MAAzB,CAA/B;AACA,QAAI,EAAC,gBAAD,KAAqB,kBAAzB;;AAEA,UAAM,sBAAM,gBAAN,CAAN;AACA,QAAI,SAAS,MAAM,yBAAyB;AAC1C,sBAD0C;AAE1C,4BAF0C;AAG1C;AAH0C,KAAzB,CAAnB;;AAMA,QAAI,WAAW,WAAf,EAA4B;AAC1B,YAAM,MAAM,+BAAN,CAAN;AACD;;AAED,QAAI,cAAc,MAAM,qBAAqB,EAAC,gBAAD,EAArB,CAAxB;AACA,QAAI,eAAe,qBAAqB,WAArB,CAAnB;AACA,WAAO,YAAP;AACD,GAhCU;;AAAA;AAAA;AAAA;AAAA,IAAJ;;kBAkCQ,O","file":"athena.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\nimport {\n  delay,\n  promisify\n} from 'bluebird';\n\nlet _pollQueryCompletedState = async function({\n  QueryExecutionId,\n  getQueryExecutionAsync,\n  pollingDelay\n}) {\n  let data = await getQueryExecutionAsync({QueryExecutionId});\n  let state = data.QueryExecution.Status.State;\n  if (state === 'RUNNING' || state === 'QUEUED') {\n    await delay(pollingDelay);\n\n    // eslint-disable-next-line fp/no-arguments\n    return await _pollQueryCompletedState(...arguments);\n  }\n\n  return state;\n};\n\nlet _queryResultToObject = function(queryResult) {\n  let columnsNames = [];\n  _.forEach(queryResult.ResultSet.Rows[0].Data, function(value, index) {\n    columnsNames[index] = value.VarCharValue;\n  });\n\n  let rows = _.drop(queryResult.ResultSet.Rows, 1);\n  let rowsObjects = _.map(rows, function(row) {\n    let rowObject = {};\n\n    _.forEach(columnsNames, function(columnName, columnIndex) {\n      rowObject[columnName] = row.Data[columnIndex].VarCharValue;\n    });\n\n    return rowObject;\n  });\n\n  return rowsObjects;\n};\n\nexport let executeQuery = async function({\n  athena = new aws.Athena({apiVersion: '2017-05-18'}),\n  params = {\n    QueryString: '',\n    ResultConfiguration: {\n      OutputLocation: 's3://aws-athena-query-results-094611745175-eu-west-1/'\n    }\n  },\n  pollingDelay = 1000,\n  initPollingDelay = pollingDelay\n}) {\n  let startQueryExecutionAsync = promisify(athena.startQueryExecution, {context: athena});\n  let getQueryExecutionAsync = promisify(athena.getQueryExecution, {context: athena});\n  let getQueryResultsAsync = promisify(athena.getQueryResults, {context: athena});\n\n  let queryExecutionData = await startQueryExecutionAsync(params);\n  let {QueryExecutionId} = queryExecutionData;\n\n  await delay(initPollingDelay);\n  let status = await _pollQueryCompletedState({\n    QueryExecutionId,\n    getQueryExecutionAsync,\n    pollingDelay\n  });\n\n  if (status !== 'SUCCEEDED') {\n    throw Error(\"Athena: query didn't succeed.\");\n  }\n\n  let queryResult = await getQueryResultsAsync({QueryExecutionId});\n  let resultObject = _queryResultToObject(queryResult);\n  return resultObject;\n};\n\nexport default exports;\n"]}