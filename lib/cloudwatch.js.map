{"version":3,"sources":["../src/cloudwatch.js"],"names":[],"mappings":"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","file":"cloudwatch.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\nexport let listAllMetrics = async function({\n  cloudwatch = new aws.CloudWatch(),\n  iteratee = undefined,\n  Token = undefined,\n  Metrics = []\n} = {}) {\n  let {\n    Metrics: newMetrics,\n    NextToken\n  } = await cloudwatch.listMetrics({NextToken: Token}).promise();\n\n\n  if (_.isFunction(iteratee)) {\n    // eslint-disable-next-line callback-return\n    await iteratee(newMetrics);\n  } else {\n    Metrics = Metrics.concat(newMetrics);\n  }\n\n  if (!NextToken) {\n    return _.isFunction(iteratee) ? undefined : Metrics;\n  }\n\n  return exports.listAllMetrics({Token: NextToken, Metrics});\n};\n\n/*\n  metrics = [{\n    Namespace: '...',\n    MetricName: '...',\n    Dimensions: [{\n      Name: '...',\n      Value: '...'\n    }]\n  }];\n\n  dimensionMetrics = [{\n    Namespace: '...',\n    MetricName: '...',\n    Dimension: { // only 1 dimension\n      Name: '...',\n      Value: '...'\n    }\n  }];\n*/\n\nexport let metricsToDimensionMetrics = function(metrics) {\n  let dimensionMetrics = [];\n\n  _.forEach(metrics, function(metric) {\n    _.forEach(metric.Dimensions, function(dimension) {\n      let dimensionMetric = _.cloneDeep(metric);\n      _.unset(metric, 'Dimensions');\n      dimensionMetric.Dimension = dimension;\n      dimensionMetrics.push(dimensionMetric);\n    });\n  });\n\n  return dimensionMetrics;\n};\n\n/*\n  dmDatapoint = {\n    region: '...'\n    namespace: '...',\n    dimension_name: '...',\n    dimension_value: '...',\n    start_time: '...',\n    end_time: '...',\n    period: ...,\n    label: '...',\n    datapoint: {\n      timestamp: '...',\n      <statistic>: ...,\n      unit: '...'\n    }\n  }\n*/\n\nexport let datapointToDmDatapoint = function({dmDatapointTpl, datapoint}) {\n  let dmDatapoint = _.cloneDeep(dmDatapointTpl);\n\n  datapoint.Timestamp = new Date(datapoint.timestamp).toISOString();\n  datapoint = _.mapKeys(datapoint, function(_value, key) {\n    return _.snakeCase(key);\n  });\n  dmDatapoint.datapoint = datapoint;\n\n  return dmDatapoint;\n};\n\nexport let getDimensionMetricDatapoints = async function({\n  cloudwatch,\n  dimensionMetric,\n  StartTime,\n  EndTime,\n  Period\n}) {\n  let {\n    Namespace,\n    Dimension,\n    MetricName\n  } = dimensionMetric;\n\n  let {\n    Datapoints,\n    Label\n  } = await cloudwatch.getMetricStatistics({\n    Namespace,\n    Dimensions: [\n      Dimension\n    ],\n    MetricName,\n    StartTime: new Date(StartTime).toISOString(),\n    EndTime: new Date(EndTime).toISOString(),\n    Period,\n    Statistics: [\n      'Average',\n      'Maximum',\n      'Minimum',\n      'SampleCount',\n      'Sum'\n    ]\n  }).promise();\n\n  let dmDatapointTpl = {\n    region: cloudwatch.config.region,\n    namespace: Namespace,\n    dimension_name: Dimension.Name,\n    dimension_value: Dimension.Value,\n    metric_name: MetricName,\n    start_time: StartTime.toISOString(),\n    end_time: EndTime.toISOString(),\n    period: Period,\n    label: Label,\n    datapoint: {}\n  };\n\n  let dmDatapoints = _.map(Datapoints, function(datapoint) {\n    return datapointToDmDatapoint({dmDatapointTpl, datapoint});\n  });\n\n  return dmDatapoints;\n};\n\nexport default exports;\n"]}