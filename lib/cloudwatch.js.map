{"version":3,"sources":["../src/cloudwatch.ts"],"names":[],"mappings":"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","file":"cloudwatch.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\nimport {\n  Fn\n} from 'lodash-firecloud/types';\n\n// TODO\n// declare module 'aws-sdk/clients/cloudwatch' {\n//   interface GetMetricStatisticsInput {\n//     StartTime: Date | string | number;\n//     EndTime: Date | string | number;\n//   }\n// }\n\ntype DimensionMetric = Omit<aws.CloudWatch.Metric, 'Dimension'> & {\n  Dimension: aws.CloudWatch.Dimension;\n};\n\nexport let listAllMetrics = async function({\n  cloudwatch = new aws.CloudWatch(),\n  iteratee,\n  Token,\n  Metrics = []\n}: {\n  cloudwatch?: aws.CloudWatch;\n  iteratee?: Fn<void, [aws.CloudWatch.Metrics]>;\n  Token?: aws.CloudWatch.NextToken;\n  Metrics?: aws.CloudWatch.Metrics;\n} = {}): Promise<aws.CloudWatch.Metrics> {\n  let {\n    Metrics: newMetrics,\n    NextToken\n  } = await cloudwatch.listMetrics({NextToken: Token}).promise();\n\n\n  if (_.isDefined(iteratee)) {\n    // eslint-disable-next-line callback-return\n    await iteratee(newMetrics);\n  } else {\n    Metrics = Metrics.concat(newMetrics);\n  }\n\n  if (_.isUndefined(NextToken)) {\n    return _.isDefined(iteratee) ? undefined : Metrics;\n  }\n\n  return listAllMetrics({Token: NextToken, Metrics});\n};\n\n/*\n  metrics = [{\n    Namespace: '...',\n    MetricName: '...',\n    Dimensions: [{\n      Name: '...',\n      Value: '...'\n    }]\n  }];\n\n  dimensionMetrics = [{\n    Namespace: '...',\n    MetricName: '...',\n    Dimension: { // only 1 dimension\n      Name: '...',\n      Value: '...'\n    }\n  }];\n*/\n\nexport let metricsToDimensionMetrics = function(metrics: aws.CloudWatch.Metrics): DimensionMetric[] {\n  let dimensionMetrics = [];\n\n  _.forEach(metrics, function(metric) {\n    _.forEach(metric.Dimensions, function(dimension) {\n      let dimensionMetric = _.cloneDeep(metric) as DimensionMetric;\n      _.unset(dimensionMetric, 'Dimensions');\n      dimensionMetric.Dimension = dimension;\n      dimensionMetrics.push(dimensionMetric);\n    });\n  });\n\n  dimensionMetrics = _.uniqBy(dimensionMetrics, function(dimensionMetric) {\n    return JSON.stringify(dimensionMetric);\n  });\n  return dimensionMetrics;\n};\n\n/*\n  dmDatapoint = {\n    region: '...'\n    namespace: '...',\n    dimension_name: '...',\n    dimension_value: '...',\n    start_time: '...',\n    end_time: '...',\n    period: ...,\n    label: '...',\n    datapoint: {\n      timestamp: '...',\n      <statistic>: ...,\n      unit: '...'\n    }\n  }\n*/\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport let datapointToDmDatapoint = function({dmDatapointTpl, datapoint}) {\n  let dmDatapoint = _.cloneDeep(dmDatapointTpl);\n\n  datapoint.Timestamp = new Date(datapoint.Timestamp).toISOString();\n  datapoint = _.mapKeys(datapoint, function(_value, key) {\n    return _.snakeCase(key);\n  });\n  dmDatapoint.datapoint = datapoint;\n\n  return dmDatapoint;\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nexport let getDimensionMetricDatapoints = async function({\n  cloudwatch,\n  dimensionMetric,\n  StartTime,\n  EndTime,\n  Period\n}: {\n  cloudwatch: aws.CloudWatch;\n  dimensionMetric: DimensionMetric;\n  StartTime: string | number | Date;\n  EndTime: string | number | Date;\n  Period: aws.CloudWatch.Period;\n}) {\n  let {\n    Namespace,\n    Dimension,\n    MetricName\n  } = dimensionMetric;\n\n  let {\n    Datapoints,\n    Label\n  } = await cloudwatch.getMetricStatistics({\n    Namespace,\n    Dimensions: [\n      Dimension\n    ],\n    MetricName,\n    // TODO\n    // StartTime: new Date(StartTime).toISOString(),\n    StartTime: new Date(StartTime),\n    // TODO\n    // EndTime: new Date(EndTime).toISOString(),\n    EndTime: new Date(EndTime),\n    Period,\n    Statistics: [\n      'Average',\n      'Maximum',\n      'Minimum',\n      'SampleCount',\n      'Sum'\n    ]\n  }).promise();\n\n  let dmDatapointTpl = {\n    timestamp: undefined as string,\n    region: cloudwatch.config.region,\n    namespace: Namespace,\n    dimension_name: Dimension.Name,\n    dimension_value: Dimension.Value,\n    metric_name: MetricName,\n    start_time: new Date(StartTime).toISOString(),\n    end_time: new Date(EndTime).toISOString(),\n    period: Period,\n    label: Label,\n    datapoint: {} as aws.CloudWatch.Datapoint\n  };\n\n  let dmDatapoints = _.map(Datapoints, function(datapoint) {\n    return datapointToDmDatapoint({dmDatapointTpl, datapoint});\n  });\n\n  return dmDatapoints as (typeof dmDatapointTpl)[];\n};\n"]}