{"version":3,"sources":["../src/cloudwatch.js"],"names":[],"mappings":"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","file":"cloudwatch.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\nexport let listAllMetrics = async function({\n  cloudwatch = new aws.CloudWatch(),\n  iteratee = undefined,\n  Token = undefined,\n  Metrics = []\n} = {}) {\n  let {\n    Metrics: newMetrics,\n    NextToken\n  } = await cloudwatch.listMetrics({NextToken: Token}).promise();\n\n\n  if (_.isFunction(iteratee)) {\n    // eslint-disable-next-line callback-return\n    await iteratee(newMetrics);\n  } else {\n    Metrics = Metrics.concat(newMetrics);\n  }\n\n  if (!NextToken) {\n    return _.isFunction(iteratee) ? undefined : Metrics;\n  }\n\n  return listAllMetrics({Token: NextToken, Metrics});\n};\n\n/*\n  metrics = [{\n    Namespace: '...',\n    MetricName: '...',\n    Dimensions: [{\n      Name: '...',\n      Value: '...'\n    }]\n  }];\n\n  dimensionMetrics = [{\n    Namespace: '...',\n    MetricName: '...',\n    Dimension: { // only 1 dimension\n      Name: '...',\n      Value: '...'\n    }\n  }];\n*/\n\nexport let metricsToDimensionMetrics = function(metrics) {\n  let dimensionMetrics = [];\n\n  _.forEach(metrics, function(metric) {\n    _.forEach(metric.Dimensions, function(dimension) {\n      let dimensionMetric = _.cloneDeep(metric);\n      _.unset(dimensionMetric, 'Dimensions');\n      dimensionMetric.Dimension = dimension;\n      dimensionMetrics.push(dimensionMetric);\n    });\n  });\n\n  dimensionMetrics = _.uniqBy(dimensionMetrics, _.unary(JSON.stringify));\n  return dimensionMetrics;\n};\n\n/*\n  dmDatapoint = {\n    region: '...'\n    namespace: '...',\n    dimension_name: '...',\n    dimension_value: '...',\n    start_time: '...',\n    end_time: '...',\n    period: ...,\n    label: '...',\n    datapoint: {\n      timestamp: '...',\n      <statistic>: ...,\n      unit: '...'\n    }\n  }\n*/\n\nexport let datapointToDmDatapoint = function({dmDatapointTpl, datapoint}) {\n  let dmDatapoint = _.cloneDeep(dmDatapointTpl);\n\n  datapoint.Timestamp = new Date(datapoint.Timestamp).toISOString();\n  datapoint = _.mapKeys(datapoint, function(_value, key) {\n    return _.snakeCase(key);\n  });\n  dmDatapoint.datapoint = datapoint;\n\n  return dmDatapoint;\n};\n\nexport let getDimensionMetricDatapoints = async function({\n  cloudwatch,\n  dimensionMetric,\n  StartTime,\n  EndTime,\n  Period\n}) {\n  let {\n    Namespace,\n    Dimension,\n    MetricName\n  } = dimensionMetric;\n\n  let {\n    Datapoints,\n    Label\n  } = await cloudwatch.getMetricStatistics({\n    Namespace,\n    Dimensions: [\n      Dimension\n    ],\n    MetricName,\n    StartTime: new Date(StartTime).toISOString(),\n    EndTime: new Date(EndTime).toISOString(),\n    Period,\n    Statistics: [\n      'Average',\n      'Maximum',\n      'Minimum',\n      'SampleCount',\n      'Sum'\n    ]\n  }).promise();\n\n  let dmDatapointTpl = {\n    region: cloudwatch.config.region,\n    namespace: Namespace,\n    dimension_name: Dimension.Name,\n    dimension_value: Dimension.Value,\n    metric_name: MetricName,\n    start_time: StartTime.toISOString(),\n    end_time: EndTime.toISOString(),\n    period: Period,\n    label: Label,\n    datapoint: {}\n  };\n\n  let dmDatapoints = _.map(Datapoints, function(datapoint) {\n    return datapointToDmDatapoint({dmDatapointTpl, datapoint});\n  });\n\n  return dmDatapoints;\n};\n\nexport default exports;\n"]}