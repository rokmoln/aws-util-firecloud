{"version":3,"sources":["../src/firehose.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;AAEO,IAAI;AAAA,sCAAoB,WAAe,EAAC,QAAD,EAAW,aAAX,EAAf,EAA0C;AACvE,QAAI,0BAAE,OAAF,CAAU,aAAV,CAAJ,EAA8B;AAC5B;AACD;;AAED,QAAI,cAAc,cAAc,GAAd,EAAlB;AACA,WAAO,YAAY,QAAnB;AACA,UAAM,SAAS,cAAT,CAAwB,WAAxB,EAAqC,OAArC,EAAN;AACA,UAAM,QAAQ,iBAAR,CAA0B,aAA1B,CAAN;AACD,GATU;;AAAA;AAAA;AAAA;AAAA,IAAJ;;AAWA,IAAI;AAAA,uCAAa,WAAe;AACrC,sBADqC;AAErC,OAFqC;AAGrC,eAAW,IAAI,iBAAI,QAAR,EAH0B;AAIrC;AAJqC,GAAf,EAKrB;AACD,QAAI,gBAAgB,EAApB;AACA,QAAI,cAAc;AAChB,wBADgB;AAEhB,eAAS,EAFO;AAGhB,gBAAU;AAHM,KAAlB;;AAMA,8BAAE,OAAF,CAAU,OAAV,EAAmB,UAAS,MAAT,EAAiB;AAClC,UAAI,OAAO,KAAK,SAAL,CAAe,MAAf,CAAX;AACA,aAAQ,GAAE,IAAK,IAAf;AACA,UAAI,aAAa,OAAO,UAAP,CAAkB,IAAlB,CAAjB;;AAEA,UAAI,aAAa,OAAO,IAAxB,EAA8B;AAC5B;AACA,YAAI,GAAJ,CAAQ,KAAR,CAAe,wCAAuC,aAAa,IAAK,MAAxE,EAA+E,EAAC,MAAD,EAA/E;AACA;AACD;;AAED;AACA,UAAI,YAAY,QAAZ,GAAuB,UAAvB,GAAoC,IAAI,IAAJ,GAAW,IAA/C,IACA,YAAY,OAAZ,CAAoB,MAApB,GAA6B,CAA7B,GAAiC,GADrC,EAC0C;AACxC,sBAAc,IAAd,CAAmB,WAAnB;AACA,sBAAc;AACZ,4BADY;AAEZ,mBAAS,EAFG;AAGZ,oBAAU;AAHE,SAAd;AAKD;;AAED,kBAAY,QAAZ,GAAuB,YAAY,QAAZ,GAAuB,UAA9C;;AAEA,kBAAY,OAAZ,CAAoB,IAApB,CAAyB;AACvB;AADuB,OAAzB;AAGD,KA3BD;;AA6BA,kBAAc,IAAd,CAAmB,WAAnB;AACA,8BAAE,MAAF,CAAS,aAAT,EAAwB,EAAC,UAAU,CAAX,EAAxB;;AAEA,UAAM,QAAQ,iBAAR,CAA0B,EAAC,QAAD,EAAW,aAAX,EAA1B,CAAN;AACD,GA9CU;;AAAA;AAAA;AAAA;AAAA,IAAJ;;kBAgDQ,O","file":"firehose.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\nexport let _putRecordBatches = async function({firehose, recordBatches}) {\n  if (_.isEmpty(recordBatches)) {\n    return;\n  }\n\n  let recordBatch = recordBatches.pop();\n  delete recordBatch.byteSize;\n  await firehose.putRecordBatch(recordBatch).promise();\n  await exports._putRecordBatches(recordBatches);\n};\n\nexport let putRecords = async function({\n  DeliveryStreamName,\n  ctx,\n  firehose = new aws.Firehose(),\n  records\n}) {\n  let recordBatches = [];\n  let recordBatch = {\n    DeliveryStreamName,\n    Records: [],\n    byteSize: 0\n  };\n\n  _.forEach(records, function(record) {\n    let Data = JSON.stringify(record);\n    Data = `${Data}\\n`;\n    let dataLength = Buffer.byteLength(Data);\n\n    if (dataLength > 1000 * 1024) {\n      // 1000 KB (not 1 MB) hard limit in Firehose http://docs.aws.amazon.com/firehose/latest/dev/limits.html\n      ctx.log.error(`Skipping record larger than 1000 KB: ${dataLength / 1024} KB.`, {record});\n      return;\n    }\n\n    // PutRecordBatch has a 4 MB limit and 500 records\n    if (recordBatch.byteSize + dataLength > 4 * 1024 * 1024 ||\n        recordBatch.Records.length + 1 > 500) {\n      recordBatches.push(recordBatch);\n      recordBatch = {\n        DeliveryStreamName,\n        Records: [],\n        byteSize: 0\n      };\n    }\n\n    recordBatch.byteSize = recordBatch.byteSize + dataLength;\n\n    recordBatch.Records.push({\n      Data\n    });\n  });\n\n  recordBatches.push(recordBatch);\n  _.remove(recordBatches, {byteSize: 0});\n\n  await exports._putRecordBatches({firehose, recordBatches});\n};\n\nexport default exports;\n"]}