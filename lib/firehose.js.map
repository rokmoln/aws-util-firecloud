{"version":3,"sources":["../src/firehose.ts"],"names":[],"mappings":"oJAAA;AACA,yD;;;;;;;;;;;;AAYA;AACO,IAAI,MAAM,GAAG;AAClB,EAAA,aAAa,EAAE,IAAI,IAAJ,GAAW,IADR;AAElB,EAAA,WAAW,EAAE,GAFK;AAGlB,EAAA,cAAc,EAAE,OAAO,IAHL,EAAb,C;;;AAMP,IAAI,iBAAiB,GAAG,gBAAe;AACrC,EAAA,QADqC;AAErC,EAAA,aAFqC,EAAf;AAGJ;AAClB,MAAI,cAAc,GAAG,CAArB;;AAEA,OAAK,IAAI,WAAT,IAAwB,aAAxB,EAAuC;AACrC,WAAO,WAAW,CAAC,QAAnB;AACA,mDAAM,QAAQ,CAAC,cAAT,CAAwB,WAAxB,EAAqC,OAArC,EAAN;AACA,IAAA,cAAc,GAAG,cAAc,GAAI,WAAW,CAAC,OAAb,CAA+B,MAAjE;AACD;;AAED,SAAO,cAAP;AACD,CAbD,C;;AAeO,IAAI,UAAU,GAAG,gBAAe;AACrC,EAAA,kBADqC;AAErC,EAAA,GAFqC;AAGrC,EAAA,QAAQ,GAAG,IAAI,gBAAI,QAAR,EAH0B;AAIrC,EAAA,OAJqC,EAAf;;;;;;;;AAYnB;AACH,MAAI,YAAY,GAAG,EAAnB;AACA,MAAI,aAAa,GAAG,EAApB;AACA,MAAI,WAAW,GAAG;AAChB,IAAA,kBADgB;AAEhB,IAAA,OAAO,EAAE,EAFO;AAGhB,IAAA,QAAQ,EAAE,CAHM,EAAlB;;;AAMA,MAAI,cAAc,GAAG,OAAO,CAAC,MAA7B;;AAEA,OAAK,IAAI,MAAT,IAAmB,OAAnB,EAA4B;AAC1B,QAAI,IAAI,GAAG,IAAI,CAAC,SAAL,CAAe,MAAf,CAAX;AACA,IAAA,IAAI,GAAI,GAAE,IAAK,IAAf;AACA,QAAI,YAAY,GAAG,MAAM,CAAC,UAAP,CAAkB,IAAlB,CAAnB;;AAEA,QAAI,YAAY,GAAG,eAAO,cAA1B,EAA0C;AACxC,MAAA,YAAY,CAAC,IAAb,CAAkB,MAAlB;AACA,qDAAM,GAAG,CAAC,GAAJ,CAAQ,KAAR,kJAAe,+BAA8B,eAAO,cAAP,GAAwB,IAAK;EACpF,YAAY,GAAG,IAAK,MADV,EACiB;AACrB,YAAA,MADqB,EADjB,CAAN;;AAIA,MAAA,cAAc,GAAG,cAAc,GAAG,CAAlC;AACA;AACD;;AAED,QAAI,WAAW,CAAC,QAAZ,GAAuB,YAAvB,GAAsC,eAAO,aAA7C;AACA,IAAA,WAAW,CAAC,OAAZ,CAAoB,MAApB,GAA6B,CAA7B,GAAiC,eAAO,WAD5C,EACyD;AACvD,MAAA,aAAa,CAAC,IAAd,CAAmB,WAAnB;AACA,MAAA,WAAW,GAAG;AACZ,QAAA,kBADY;AAEZ,QAAA,OAAO,EAAE,EAFG;AAGZ,QAAA,QAAQ,EAAE,CAHE,EAAd;;AAKD;;AAED,IAAA,WAAW,CAAC,QAAZ,GAAuB,WAAW,CAAC,QAAZ,GAAuB,YAA9C;;AAEA,IAAA,WAAW,CAAC,OAAZ,CAAoB,IAApB,CAAyB;AACvB,MAAA,IADuB,EAAzB;;AAGD;;AAED,EAAA,aAAa,CAAC,IAAd,CAAmB,WAAnB;AACA,EAAA,aAAa,GAAG,yBAAE,MAAF,CAAS,aAAT,EAAwB,UAAS,WAAT,EAAsB;AAC5D,WAAO,WAAW,CAAC,QAAZ,KAAyB,CAAhC;AACD,GAFe,CAAhB;;AAIA,MAAI,cAAc,4CAAG,MAAM,0BAAkB,EAAC,QAAD,EAAW,aAAX,EAAlB,CAAT,+IAAlB;AACA,MAAI,cAAc,KAAK,cAAvB,EAAuC;AACrC,UAAM,IAAI,KAAJ,CAAW,uCAAsC,cAAe,cAAa,cAAe,GAA5F,CAAN;AACD;;AAED,SAAO;AACL,IAAA,YADK,EAAP;;AAGD,CApEM,C","file":"firehose.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\nimport {\n  LambdaContext\n} from './types';\n\ntype RecordBatch = {\n  DeliveryStreamName: aws.Firehose.DeliveryStreamName;\n  Records: aws.Firehose.Record[];\n  byteSize: number;\n};\n\n// see https://docs.aws.amazon.com/firehose/latest/dev/limits.html\nexport let limits = {\n  batchByteSize: 4 * 1024 * 1024,\n  batchRecord: 500,\n  recordByteSize: 1000 * 1024\n};\n\nlet _putRecordBatches = async function({\n  firehose,\n  recordBatches\n}): Promise<number> {\n  let processedCount = 0;\n\n  for (let recordBatch of recordBatches) {\n    delete recordBatch.byteSize;\n    await firehose.putRecordBatch(recordBatch).promise();\n    processedCount = processedCount + (recordBatch.Records as any[]).length;\n  }\n\n  return processedCount;\n};\n\nexport let putRecords = async function({\n  DeliveryStreamName,\n  ctx,\n  firehose = new aws.Firehose(),\n  records\n}: {\n  DeliveryStreamName: aws.Firehose.DeliveryStreamName;\n  ctx: LambdaContext;\n  firehose: aws.Firehose;\n  records: aws.Firehose.Record[];\n}): Promise<void | {\n    largeRecords: aws.Firehose.Record[];\n  }> {\n  let largeRecords = [] as aws.Firehose.Record[];\n  let recordBatches = [] as RecordBatch[];\n  let recordBatch = {\n    DeliveryStreamName,\n    Records: [],\n    byteSize: 0\n  } as RecordBatch;\n\n  let toProcessCount = records.length;\n\n  for (let record of records) {\n    let Data = JSON.stringify(record);\n    Data = `${Data}\\n`;\n    let dataByteSize = Buffer.byteLength(Data);\n\n    if (dataByteSize > limits.recordByteSize) {\n      largeRecords.push(record);\n      await ctx.log.error(`Skipping record larger than ${limits.recordByteSize / 1024} KB: \\\n${dataByteSize / 1024} KB.`, {\n        record\n      });\n      toProcessCount = toProcessCount - 1;\n      continue;\n    }\n\n    if (recordBatch.byteSize + dataByteSize > limits.batchByteSize ||\n        recordBatch.Records.length + 1 > limits.batchRecord) {\n      recordBatches.push(recordBatch);\n      recordBatch = {\n        DeliveryStreamName,\n        Records: [],\n        byteSize: 0\n      } as RecordBatch;\n    }\n\n    recordBatch.byteSize = recordBatch.byteSize + dataByteSize;\n\n    recordBatch.Records.push({\n      Data\n    });\n  }\n\n  recordBatches.push(recordBatch);\n  recordBatches = _.reject(recordBatches, function(recordBatch) {\n    return recordBatch.byteSize === 0;\n  });\n\n  let processedCount = await _putRecordBatches({firehose, recordBatches});\n  if (processedCount !== toProcessCount) {\n    throw new Error(`Not all records processed. Expected ${toProcessCount}, actually ${processedCount}.`);\n  }\n\n  return {\n    largeRecords\n  };\n};\n"]}