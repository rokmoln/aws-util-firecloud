{"version":3,"sources":["../src/firehose.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;AAEA;AACO,IAAI,0BAAS;AAClB,iBAAe,IAAI,IAAJ,GAAW,IADR;AAElB,eAAa,GAFK;AAGlB,kBAAgB,OAAO;AAHL,CAAb;;AAMP,IAAI;AAAA,sCAAoB,WAAe;AACrC,YADqC;AAErC;AAFqC,GAAf,EAGrB;AACD,QAAI,iBAAiB,CAArB;;AAEA;AACA,SAAK,IAAI,WAAT,IAAwB,aAAxB,EAAuC;AACrC,aAAO,YAAY,QAAnB;AACA,YAAM,SAAS,cAAT,CAAwB,WAAxB,EAAqC,OAArC,EAAN;AACA,uBAAiB,iBAAiB,YAAY,OAAZ,CAAoB,MAAtD;AACD;;AAED,WAAO,cAAP;AACD,GAdG;;AAAA;AAAA;AAAA;AAAA,IAAJ;;AAgBO,IAAI;AAAA,uCAAa,WAAe;AACrC,sBADqC;AAErC,OAFqC;AAGrC,eAAW,IAAI,iBAAI,QAAR,EAH0B;AAIrC;AAJqC,GAAf,EAKrB;AACD,QAAI,gBAAgB,EAApB;AACA,QAAI,cAAc;AAChB,wBADgB;AAEhB,eAAS,EAFO;AAGhB,gBAAU;AAHM,KAAlB;;AAMA,QAAI,iBAAiB,QAAQ,MAA7B;;AAEA,8BAAE,OAAF,CAAU,OAAV,EAAmB,UAAS,MAAT,EAAiB;AAClC,UAAI,OAAO,KAAK,SAAL,CAAe,MAAf,CAAX;AACA,aAAQ,GAAE,IAAK,IAAf;AACA,UAAI,aAAa,OAAO,UAAP,CAAkB,IAAlB,CAAjB;;AAEA,UAAI,aAAa,eAAO,cAAxB,EAAwC;AACtC,YAAI,GAAJ,CAAQ,KAAR,CAAe,+BAA8B,eAAO,cAAP,GAAwB,IAAK;EAC9E,aAAa,IAAK,MADd,EACqB,EAAC,MAAD,EADrB;AAEA,yBAAiB,iBAAiB,CAAlC;AACA;AACD;;AAED,UAAI,YAAY,QAAZ,GAAuB,UAAvB,GAAoC,eAAO,aAA3C,IACA,YAAY,OAAZ,CAAoB,MAApB,GAA6B,CAA7B,GAAiC,eAAO,WAD5C,EACyD;AACvD,sBAAc,IAAd,CAAmB,WAAnB;AACA,sBAAc;AACZ,4BADY;AAEZ,mBAAS,EAFG;AAGZ,oBAAU;AAHE,SAAd;AAKD;;AAED,kBAAY,QAAZ,GAAuB,YAAY,QAAZ,GAAuB,UAA9C;;AAEA,kBAAY,OAAZ,CAAoB,IAApB,CAAyB;AACvB;AADuB,OAAzB;AAGD,KA3BD;;AA6BA,kBAAc,IAAd,CAAmB,WAAnB;AACA,8BAAE,MAAF,CAAS,aAAT,EAAwB,EAAC,UAAU,CAAX,EAAxB;;AAEA,QAAI,mBAAmB,MAAM,0BAAkB,EAAC,QAAD,EAAW,aAAX,EAAlB,CAA7B;AACA,QAAI,qBAAqB,cAAzB,EAAyC;AACvC,YAAM,IAAI,KAAJ,CAAW,uCAAsC,cAAe,cAAa,gBAAiB,EAA9F,CAAN;AACD;AACF,GAnDU;;AAAA;AAAA;AAAA;AAAA,IAAJ;;kBAqDQ,O","file":"firehose.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\n// see https://docs.aws.amazon.com/firehose/latest/dev/limits.html\nexport let limits = {\n  batchByteSize: 4 * 1024 * 1024,\n  batchRecord: 500,\n  recordByteSize: 1000 * 1024\n};\n\nlet _putRecordBatches = async function({\n  firehose,\n  recordBatches\n}) {\n  let processedCount = 0;\n\n  // eslint-disable-next-line fp/no-loops, better/no-fors\n  for (let recordBatch of recordBatches) {\n    delete recordBatch.byteSize;\n    await firehose.putRecordBatch(recordBatch).promise();\n    processedCount = processedCount + recordBatch.Records.length;\n  }\n\n  return processedCount;\n};\n\nexport let putRecords = async function({\n  DeliveryStreamName,\n  ctx,\n  firehose = new aws.Firehose(),\n  records\n}) {\n  let recordBatches = [];\n  let recordBatch = {\n    DeliveryStreamName,\n    Records: [],\n    byteSize: 0\n  };\n\n  let toProcessCount = records.length;\n\n  _.forEach(records, function(record) {\n    let Data = JSON.stringify(record);\n    Data = `${Data}\\n`;\n    let dataLength = Buffer.byteLength(Data);\n\n    if (dataLength > limits.recordByteSize) {\n      ctx.log.error(`Skipping record larger than ${limits.recordByteSize / 1024} KB: \\\n${dataLength / 1024} KB.`, {record});\n      toProcessCount = toProcessCount - 1;\n      return;\n    }\n\n    if (recordBatch.byteSize + dataLength > limits.batchByteSize ||\n        recordBatch.Records.length + 1 > limits.batchRecord) {\n      recordBatches.push(recordBatch);\n      recordBatch = {\n        DeliveryStreamName,\n        Records: [],\n        byteSize: 0\n      };\n    }\n\n    recordBatch.byteSize = recordBatch.byteSize + dataLength;\n\n    recordBatch.Records.push({\n      Data\n    });\n  });\n\n  recordBatches.push(recordBatch);\n  _.remove(recordBatches, {byteSize: 0});\n\n  let processedRecords = await _putRecordBatches({firehose, recordBatches});\n  if (processedRecords !== toProcessCount) {\n    throw new Error(`Not all records processed. Expected ${toProcessCount}, actually ${processedRecords}`);\n  }\n};\n\nexport default exports;\n"]}