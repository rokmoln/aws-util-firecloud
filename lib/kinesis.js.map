{"version":3,"sources":["../src/kinesis.js"],"names":[],"mappings":"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","file":"kinesis.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\n// see https://docs.aws.amazon.com/kinesis/latest/APIReference/API_PutRecords.html\nexport let limits = {\n  batchByteSize: 5 * 1024 * 1024,\n  batchRecord: 500,\n  recordByteSize: 1024 * 1024\n};\n\nlet _putRecordBatches = async function({\n  kinesis,\n  recordBatches\n}) {\n  let processedCount = 0;\n\n  // eslint-disable-next-line fp/no-loops, better/no-fors\n  for (let recordBatch of recordBatches) {\n    delete recordBatch.byteSize;\n    await kinesis.putRecordBatch(recordBatch).promise();\n    processedCount = processedCount + recordBatch.Records.length;\n  }\n\n  return processedCount;\n};\n\nexport let putRecords = async function({\n  ExplicitHashKey,\n  PartitionKey,\n  StreamName,\n  ctx,\n  kinesis = new aws.Kinesis(),\n  records\n}) {\n  let largeRecords = [];\n  let recordBatches = [];\n  let recordBatch = {\n    StreamName,\n    Records: [],\n    byteSize: 0\n  };\n\n  let toProcessCount = records.length;\n\n  _.forEach(records, function(record) {\n    let Data = JSON.stringify(record);\n    let dataByteSize = Buffer.byteLength(JSON.stringify({\n      Data: record,\n      ExplicitHashKey,\n      PartitionKey\n    }));\n\n    if (dataByteSize > limits.recordByteSize) {\n      largeRecords.push(record);\n      ctx.log.error(`Skipping record larger than ${limits.recordByteSize / 1024} KB: \\\n${dataByteSize / 1024} KB.`, {\n        record\n      });\n      toProcessCount = toProcessCount - 1;\n      return;\n    }\n\n    if (recordBatch.byteSize + dataByteSize > limits.batchByteSize ||\n        recordBatch.Records.length + 1 > limits.batchRecord) {\n      recordBatches.push(recordBatch);\n      recordBatch = {\n        StreamName,\n        Records: [],\n        byteSize: 0\n      };\n    }\n\n    recordBatch.byteSize = recordBatch.byteSize + dataByteSize;\n\n    recordBatch.Records.push({\n      Data,\n      PartitionKey\n    });\n  });\n\n  recordBatches.push(recordBatch);\n  recordBatches = _.reject(recordBatches, {\n    byteSize: 0\n  });\n\n  let processedCount = await _putRecordBatches({kinesis, recordBatches});\n  if (processedCount !== toProcessCount) {\n    throw new Error(`Not all records processed. Expected ${toProcessCount}, actually ${processedCount}.`);\n  }\n\n  return {\n    largeRecords\n  };\n};\n\nexport default exports;\n"]}