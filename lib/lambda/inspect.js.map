{"version":3,"sources":["../../src/lambda/inspect.js"],"names":[],"mappings":"qKAAA;AACA,gD;;AAEA,IAAI,UAAU,GAAG,UAAS,EAAT,EAAa;AAC5B,MAAI,CAAC,yBAAE,UAAF,CAAa,EAAb,CAAL,EAAuB;AACrB;AACD;;AAED,MAAI;AACF,WAAO,EAAE,EAAT;AACD,GAFD,CAEE,OAAO,IAAP,EAAa;AACb;AACD;AACF,CAVD,C;;AAYA,IAAI,eAAe,GAAG,UAAS,UAAT,EAAqB,kBAArB,EAAyC,IAAzC,EAA+C;AACnE,SAAO,yBAAE,GAAF,CAAM,UAAN,EAAkB,IAAlB,IAA0B,yBAAE,GAAF,CAAM,kBAAN,EAA0B,IAA1B,CAAjC;AACD,CAFD,C;;AAIO,IAAI,OAAO,GAAG,gBAAe,EAAC,GAAD,EAAf,EAAsB;AACzC,MAAI,CAAC,GAAG,CAAC,GAAJ,CAAQ,SAAb,EAAwB;AACtB;AACD;;AAED,MAAI,eAAe,GAAG,yBAAE,IAAF,CAAO,OAAP,EAAgB;AACpC,QADoC;AAEpC,QAFoC;AAGpC,SAHoC;AAIpC,UAJoC;AAKpC,OALoC;AAMpC,YANoC;AAOpC,OAPoC;AAQpC,YARoC;AASpC,WAToC;AAUpC,SAVoC;AAWpC,WAXoC;AAYpC,YAZoC,CAAhB,CAAtB;;AAcA,2BAAE,KAAF,CAAQ,eAAR,EAAyB,yBAAE,SAAF,CAAY,yBAAE,IAAF,CAAO,OAAP,EAAgB;AACnD,YADmD;AAEnD,eAFmD;AAGnD,UAHmD,CAAhB,CAAZ,qBAAzB;;;AAMA,MAAI,UAAU,GAAG,yBAAE,SAAF,CAAY,yBAAE,IAAF,CAAO,WAAP,EAAW;AACtC;AACA,wBAFsC;AAGtC,UAHsC,CAAX,CAAZ,qBAAjB;;;AAMA,MAAI,UAAU,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe;AACzC,IAAA,OAAO,EAAE,eADgC;AAEzC,IAAA,EAAE,EAAE,UAFqC,EAAf,CAAX,CAAjB;;;AAKA,MAAI;AACF,IAAA,kBADE;AAEA,EAAA,OAFJ;AAGA,EAAA,OAAO,CAAC,kBAAR,GAA6B,UAA7B;;AAEA,MAAI,kBAAJ,EAAwB;AACtB,IAAA,UAAU,CAAC,YAAX,GAA0B,yBAAE,MAAF,CAAS;AACjC,UADiC;AAEjC,YAFiC,CAAT;AAGvB,cAAS,GAAT,EAAc,GAAd,EAAmB;AACpB,MAAA,GAAG,CAAC,GAAD,CAAH,GAAW,wBAAgB,UAAhB,EAA4B,kBAA5B,EAAiD,oBAAmB,GAAI,EAAxE,CAAX;AACA,aAAO,GAAP;AACD,KANyB,EAMvB,EANuB,CAA1B;;AAQA,IAAA,UAAU,CAAC,eAAX,GAA6B,yBAAE,MAAF,CAAS;AACpC,cADoC;AAEpC,SAFoC,CAAT;AAG1B,cAAS,GAAT,EAAc,GAAd,EAAmB;AACpB,MAAA,GAAG,CAAC,GAAD,CAAH,GAAW,wBAAgB,UAAhB,EAA4B,kBAA5B,EAAiD,uBAAsB,GAAI,EAA3E,CAAX;AACA,aAAO,GAAP;AACD,KAN4B,EAM1B,EAN0B,CAA7B;AAOD;;AAED,OAAK,IAAI,GAAT,IAAgB,UAAhB,EAA4B;AAC1B,mDAAM,GAAG,CAAC,GAAJ,CAAQ,KAAR,8JAAe,eAAc,GAAI,GAAjC,EAAqC;AACzC,UAAA,GAAG,EAAE,UAAU,CAAC,GAAD,CAD0B,EAArC,CAAN;;AAGD;AACF,CAhEM,C","file":"inspect.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport os from 'os';\n\nlet _tryInvoke = function(fn) {\n  if (!_.isFunction(fn)) {\n    return;\n  }\n\n  try {\n    return fn();\n  } catch (_err) {\n    // ignore\n  }\n};\n\nlet _diffInspection = function(inspection, previousInspection, path) {\n  return _.get(inspection, path) - _.get(previousInspection, path);\n};\n\nexport let inspect = async function({ctx}) {\n  if (!ctx.log._canTrace) {\n    return;\n  }\n\n  let processSnapshot = _.pick(process, [\n    'arch',\n    'argv',\n    'argv0',\n    'config',\n    'env',\n    'execArgv',\n    'pid',\n    'platform',\n    'release',\n    'title',\n    'version',\n    'versions'\n  ]);\n  _.merge(processSnapshot, _.mapValues(_.pick(process, [\n    'cpuUsage',\n    'memoryUsage',\n    'uptime'\n  ]), _tryInvoke));\n\n  let osSnapshot = _.mapValues(_.omit(os, [\n    // silence DeprecatedWarnings\n    'getNetworkInterfaces',\n    'tmpDir'\n  ]), _tryInvoke);\n\n  let inspection = JSON.parse(JSON.stringify({\n    process: processSnapshot,\n    os: osSnapshot\n  }));\n\n  let {\n    previousInspection\n  } = inspect;\n  inspect.previousInspection = inspection;\n\n  if (previousInspection) {\n    inspection.cpuUsageDiff = _.reduce([\n      'user',\n      'system'\n    ], function(acc, key) {\n      acc[key] = _diffInspection(inspection, previousInspection, `process.cpuUsage.${key}`);\n      return acc;\n    }, {});\n\n    inspection.memoryUsageDiff = _.reduce([\n      'heapUsed',\n      'rss'\n    ], function(acc, key) {\n      acc[key] = _diffInspection(inspection, previousInspection, `process.memoryUsage.${key}`);\n      return acc;\n    }, {});\n  }\n\n  for (let key in inspection) {\n    await ctx.log.trace(`Inspecting '${key}'`, {\n      key: inspection[key]\n    });\n  }\n};\n\nexport default inspect;\n"]}