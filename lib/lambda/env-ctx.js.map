{"version":3,"sources":["../../src/lambda/env-ctx.js"],"names":[],"mappings":"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","file":"env-ctx.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\n\nlet _getResolver = function({\n  ctx,\n  tags = [\n    'default'\n  ]\n}) {\n  let {\n    env\n  } = ctx;\n\n  return _.join([\n    env.AWS_ACCOUNT_ID,\n    env.AWS_LAMBDA_FUNCTION_ALIAS,\n    env.AWS_LAMBDA_FUNCTION_NAME,\n    env.AWS_REGION,\n    env.ENV_NAME,\n    ...tags\n  ]);\n};\n\nlet _get = async function({ctx, tags}) {\n  let {\n    env\n  } = ctx;\n\n  let s3 = new aws.S3({\n    region: env.AWS_REGION,\n    signatureVersion: 'v4'\n  });\n\n  let Body;\n\n  await ctx.log.trackTime('aws-util-firecloud.lambda._get: Fetching env ctx...', async function() {\n    let result = await s3.getObject({\n      Bucket: env.S3_CONFIG_BUCKET,\n      Key: `${env.ENV_NAME}.json`\n    }).promise();\n\n    ({\n      Body\n    } = result);\n  });\n  Body = JSON.parse(Body.toString());\n\n  let newCtx = {};\n  _.forEach(tags, function(tag) {\n    newCtx = _.merge(newCtx, _.defaultTo(Body[tag], {}));\n  });\n\n  return newCtx;\n};\n_get = _.memoizeTtl(60 * 1000, _get, _getResolver);\n\nlet _getAndRefresh = async function(...args) {\n  let cacheKey = _getResolver(...args);\n  if (_get.cache.has(cacheKey)) {\n    let {\n      value,\n      expires\n    } = _get.cache.get(cacheKey);\n\n    if (expires <= Date.now()) {\n      // schedule a refresh\n      _get(...args);\n    }\n\n    return value;\n  }\n\n  return await _get(...args);\n};\n\nexport let merge = async function({e, ctx, pkg}) {\n  let AWS_ACCOUNT_ID =\n      _.split(_.get(ctx, 'invokedFunctionArn', ''), ':')[4];\n  AWS_ACCOUNT_ID =\n    _.defaultTo(_.get(e, 'requestContext.accountId'), AWS_ACCOUNT_ID);\n\n  let AWS_REGION =\n      _.split(_.get(ctx, 'invokedFunctionArn', ''), ':')[3];\n\n  let pkgNameRE = _.replace(pkg.name, /([.-])/, '\\\\$1');\n  let ENV_NAME =\n      _.split(_.get(ctx, 'invokedFunctionArn', ''), ':')[6];\n  ENV_NAME = _.replace(ENV_NAME, new RegExp(`\\\\-${pkgNameRE}$`), '');\n\n  let AWS_LAMBDA_FUNCTION_NAME =\n      _.split(_.get(ctx, 'invokedFunctionArn', ''), ':')[6];\n\n  let AWS_LAMBDA_FUNCTION_ALIAS =\n      _.split(_.get(ctx, 'invokedFunctionArn', ''), ':')[7];\n  AWS_LAMBDA_FUNCTION_ALIAS = _.defaultTo(AWS_LAMBDA_FUNCTION_ALIAS, '$LATEST');\n\n  _.defaultsDeep(ctx, {\n    env: e.stageVariables\n  }, {\n    env: {\n      AWS_ACCOUNT_ID,\n      AWS_LAMBDA_FUNCTION_ALIAS,\n      AWS_LAMBDA_FUNCTION_NAME,\n      AWS_REGION,\n      ENV_NAME\n    }\n  }, {\n    env: e.stageVariables\n  }, {\n    env: {\n      // AWS does not allow empty-string stage variables...\n      API_BASE_PATH: '',\n      API_SECONDARY_BASE_PATH: ''\n    }\n  }, {\n    env: process.env\n  });\n\n  let envCtx = await _getAndRefresh({\n    ctx,\n    tags: [\n      'lambdas',\n      `lambdas/${pkg.name}`\n    ]\n  });\n  _.defaultsDeep(ctx, envCtx);\n};\n\nexport default exports;\n"]}