{"version":3,"sources":["../../src/lambda/logger.ts"],"names":[],"mappings":";;AAEA;AACA;AACA;;;;;;AAMA,gC,8FAVA;;;;;;;;;;;;;;AAwBA,IAAI,kBAAkB,GAAG,UAAS,EAAC,GAAD,EAAT,EAAgB;AACvC,SAAO,gBAAe,EAAC,KAAD,EAAf,EAAwB;AAC7B;AACA,6BAAE,KAAF,CAAQ,KAAR,EAAe;AACb,MAAA,GAAG,EAAE;AACH,QAAA,YAAY,EAAE,GAAG,CAAC,YADf,EADQ,EAAf;;;;AAMA,WAAO,KAAP;AACD,GATD;AAUD,CAXD,C;;AAaA,IAAI,YAAY;AACd,iFADF,C;;AAGA,IAAI,eAAe,GAAG,UAAS,EAAC,GAAD,EAAT;;AAEb;AACP,kBAAI,MAAJ,CAAW,MAAX,GAAoB;AAClB,IAAA,KAAK,EAAE,KADW;AAElB,IAAA,GAAG,EAAE,UAAS,GAAG,QAAZ,EAAsB;AACzB,UAAI,CAAC,GAAG,CAAC,GAAJ,CAAQ,SAAb,EAAwB;AACtB;AACD;;AAED,4BAAO,QAAQ,CAAC,CAAD,CAAf,EAAoB,GAAG,CAAC,GAAxB;AACA,UAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EAAyB;AACvB,cAAM,IAAI,KAAJ,CAAW,iCAAgC,QAAQ,CAAC,MAAO,+BAA3D,CAAN;AACD;AACF,KAXiB,EAApB;;AAaD,CAhBD,C;;AAkBA,IAAI,qBAAqB,GAAG,UAAS,EAAC,GAAD,EAAT;;AAEnB;AACP,MAAI,CAAC,GAAG,CAAC,GAAJ,CAAQ,SAAb,EAAwB;AACtB;AACD;AACD,EAAA,KAAK,CAAC,eAAN,GAAwB,QAAxB;AACA;AACA,EAAA,GAAG,CAAC,GAAJ,CAAQ,KAAR,2JAAc,4BAAd;AACD,CATD,C;;AAWO,IAAI,KAAK,GAAG,UAAS,EAAC,GAAD,EAAT;;AAER;AACT,MAAI,KAAK,GAAG,yBAAE,GAAF,CAAM,GAAN,EAAW,eAAX,EAA4B,MAA5B,CAAZ;;AAEA,MAAI,OAAO,GAAG,IAAI,cAAJ,CAAW;AACvB,IAAA,WAAW,EAAE;AACX,gCADW;AAEX,+BAFW;AAGX,+BAAmB,EAAC,GAAD,EAAnB,CAHW,CADU;;AAMvB,IAAA,SAAS,EAAE;AACT,uCAAsB;AACpB,MAAA,KADoB,EAAtB,CADS,CANY;;;AAWvB,IAAA,eAAe,EAAE,IAXM;AAYvB,IAAA,UAAU,EAAE,IAZW,EAAX,CAAd;;;AAeA,MAAI,MAAM,GAAG,yBAAE,MAAF,CAAS,OAAT,EAAkB;AAC7B,IAAA,KAAK,EAAE,YAAW;AAChB,aAAO,KAAP;AACD,KAH4B;;AAK7B;AACA,IAAA,SAAS,EAAE,CAAC,OAAO,CAAC,kBAAR,CAA2B,OAA3B,EAAoC,KAApC,CANiB,EAAlB,CAAb;;;AASA,EAAA,GAAG,CAAC,GAAJ,GAAU,MAAV;AACA,0BAAgB,EAAC,GAAD,EAAhB;AACA,gCAAsB,EAAC,GAAD,EAAtB;;AAEA,SAAO,MAAP;AACD,CAlCM,C","file":"logger.js","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\nimport _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\nimport logger from '../logger';\n\nimport {\n  LambdaContext\n} from '../types';\n\nimport {\n  MinLog,\n  logToConsoleAwsLambda,\n  serializeErr,\n  serializeTime\n} from 'minlog';\n\n// TODO missing definition in aws-sdk-js\ndeclare module 'aws-sdk/lib/config' {\n  interface Logger {\n    isTTY?: boolean;\n  }\n}\n\nlet _makeCtxSerializer = function({ctx}) {\n  return async function({entry}) {\n    // minimal ctx\n    _.merge(entry, {\n      ctx: {\n        awsRequestId: ctx.awsRequestId\n      }\n    });\n\n    return entry;\n  };\n};\n\nlet _awsLoggerRE =\n  /^ *\\[AWS ([^ ]+) ([^ ]+) ([^ ]+)s ([^ ]+) retries] ([^(]+)\\(((?:.|\\n)+)\\)[^)]*$/;\n\nlet _setupAwsLogger = function({ctx}: {\n  ctx: LambdaContext;\n}): void {\n  aws.config.logger = {\n    isTTY: false,\n    log: function(...messages) {\n      if (!ctx.log._canTrace) {\n        return;\n      }\n\n      logger(messages[0], ctx.log);\n      if (messages.length > 1) {\n        throw new Error(`aws-sdk-js logger called with ${messages.length} arguments instead of just 1.`);\n      }\n    }\n  };\n};\n\nlet _setupLongStacktraces = function({ctx}: {\n  ctx: LambdaContext;\n}): void {\n  if (!ctx.log._canTrace) {\n    return;\n  }\n  Error.stackTraceLimit = Infinity;\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  ctx.log.trace('Long stack traces enabled.');\n};\n\nexport let setup = function({ctx}: {\n  ctx: LambdaContext;\n}): MinLog {\n  let level = _.get(ctx, 'env.LOG_LEVEL', 'info');\n\n  let _logger = new MinLog({\n    serializers: [\n      serializeTime(),\n      serializeErr(),\n      _makeCtxSerializer({ctx})\n    ],\n    listeners: [\n      logToConsoleAwsLambda({\n        level\n      })\n    ],\n    requireRawEntry: true,\n    requireSrc: true\n  });\n\n  let logger = _.assign(_logger, {\n    level: function() {\n      return level;\n    },\n\n    // internal convenience\n    _canTrace: !_logger.levelIsBeyondGroup('trace', level)\n  });\n\n  ctx.log = logger;\n  _setupAwsLogger({ctx});\n  _setupLongStacktraces({ctx});\n\n  return logger;\n};\n"]}