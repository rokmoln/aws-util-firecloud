{"version":3,"sources":["../../src/lambda/logger.js"],"names":[],"mappings":"kOAAA;AACA;AACA;;AAEA,gC;;;;;;;AAOA,IAAI,kBAAkB,GAAG,UAAS,EAAC,GAAD,EAAT,EAAgB;AACvC,SAAO,gBAAe,EAAC,KAAD,EAAf,EAAwB;AAC7B;AACA,6BAAE,KAAF,CAAQ,KAAR,EAAe;AACb,MAAA,GAAG,EAAE;AACH,QAAA,YAAY,EAAE,GAAG,CAAC,YADf,EADQ,EAAf;;;;AAMA,WAAO,KAAP;AACD,GATD;AAUD,CAXD,C;;AAaA,IAAI,YAAY;AACd,iFADF,C;;AAGA,IAAI,eAAe,GAAG,UAAS,EAAC,GAAD,EAAT,EAAgB;AACpC,kBAAI,MAAJ,CAAW,MAAX,GAAoB;AAClB,IAAA,KAAK,EAAE,KADW;AAElB,IAAA,GAAG,EAAE,UAAS,aAAT,EAAwB;AAC3B,UAAI,CAAC,GAAG,CAAC,GAAJ,CAAQ,SAAb,EAAwB;AACtB;AACD;;AAED,2BAAO,aAAP,EAAsB,GAAG,CAAC,GAA1B;AACD,KARiB,EAApB;;AAUD,CAXD,C;;AAaA,IAAI,qBAAqB,GAAG,UAAS,EAAC,GAAD,EAAT,EAAgB;AAC1C,MAAI,GAAG,CAAC,GAAJ,CAAQ,SAAZ,EAAuB;AACrB,IAAA,KAAK,CAAC,eAAN,GAAwB,QAAxB;;AAEA,QAAI,yBAAE,UAAF,CAAa,OAAO,CAAC,MAArB,CAAJ,EAAkC;AAChC,MAAA,OAAO,CAAC,MAAR,CAAe;AACb,QAAA,QAAQ,EAAE,IADG;AAEb,QAAA,eAAe,EAAE,IAFJ,EAAf;;AAID;;AAED,IAAA,GAAG,CAAC,GAAJ,CAAQ,KAAR,2JAAc,4BAAd;AACD,GAXD,MAWO,IAAI,KAAK,CAAC,eAAN,KAA0B,QAA1B,IAAsC,QAAQ,IAAR,CAAa,OAAO,CAAC,GAAR,CAAY,QAAzB,CAA1C,EAA8E;AACnF,IAAA,GAAG,CAAC,GAAJ,CAAQ,KAAR,2JAAc,+DAAd;AACD;AACF,CAfD,C;;AAiBO,IAAI,KAAK,GAAG,UAAS,EAAC,GAAD,EAAT,EAAgB;AACjC,MAAI,KAAK,GAAG,yBAAE,GAAF,CAAM,GAAN,EAAW,eAAX,EAA4B,MAA5B,CAAZ;;AAEA,MAAI,MAAM,GAAG,IAAI,cAAJ,CAAW;AACtB,IAAA,WAAW,EAAE;AACX,gCADW;AAEX,+BAFW;AAGX,+BAAmB,EAAC,GAAD,EAAnB,CAHW,CADS;;AAMtB,IAAA,SAAS,EAAE;AACT,uCAAsB;AACpB,MAAA,KADoB,EAAtB,CADS,CANW;;;AAWtB,IAAA,eAAe,EAAE,IAXK;AAYtB,IAAA,UAAU,EAAE,IAZU,EAAX,CAAb;;;AAeA,EAAA,MAAM,CAAC,KAAP,GAAe,YAAW;AACxB,WAAO,KAAP;AACD,GAFD;;AAIA;AACA,EAAA,MAAM,CAAC,SAAP,GAAmB,CAAC,MAAM,CAAC,kBAAP,CAA0B,OAA1B,EAAmC,KAAnC,CAApB;;AAEA,EAAA,GAAG,CAAC,GAAJ,GAAU,MAAV;AACA,0BAAgB,EAAC,GAAD,EAAhB;AACA,gCAAsB,EAAC,GAAD,EAAtB;AACD,CA5BM,C;;AA8BQ,O","file":"logger.js","sourcesContent":["import _ from 'lodash-firecloud';\nimport aws from 'aws-sdk';\nimport logger from '../logger';\n\nimport {\n  MinLog,\n  logToConsoleAwsLambda,\n  serializeErr,\n  serializeTime\n} from 'minlog';\n\nlet _makeCtxSerializer = function({ctx}) {\n  return async function({entry}) {\n    // minimal ctx\n    _.merge(entry, {\n      ctx: {\n        awsRequestId: ctx.awsRequestId\n      }\n    });\n\n    return entry;\n  };\n};\n\nlet _awsLoggerRE =\n  /^ *\\[AWS ([^ ]+) ([^ ]+) ([^ ]+)s ([^ ]+) retries] ([^(]+)\\(((?:.|\\n)+)\\)[^)]*$/;\n\nlet _setupAwsLogger = function({ctx}) {\n  aws.config.logger = {\n    isTTY: false,\n    log: function(awsSdkMessage) {\n      if (!ctx.log._canTrace) {\n        return;\n      }\n\n      logger(awsSdkMessage, ctx.log);\n    }\n  };\n};\n\nlet _setupLongStacktraces = function({ctx}) {\n  if (ctx.log._canTrace) {\n    Error.stackTraceLimit = Infinity;\n\n    if (_.isFunction(Promise.config)) {\n      Promise.config({\n        warnings: true,\n        longStackTraces: true\n      });\n    }\n\n    ctx.log.trace('Long stack traces enabled.');\n  } else if (Error.stackTraceLimit === Infinity && /^prod/.test(process.env.NODE_ENV)) {\n    ctx.log.error('Long stack traces cannot be disabled in this lambda instance!');\n  }\n};\n\nexport let setup = function({ctx}) {\n  let level = _.get(ctx, 'env.LOG_LEVEL', 'info');\n\n  let logger = new MinLog({\n    serializers: [\n      serializeTime(),\n      serializeErr(),\n      _makeCtxSerializer({ctx})\n    ],\n    listeners: [\n      logToConsoleAwsLambda({\n        level\n      })\n    ],\n    requireRawEntry: true,\n    requireSrc: true\n  });\n\n  logger.level = function() {\n    return level;\n  };\n\n  // internal convenience\n  logger._canTrace = !logger.levelIsBeyondGroup('trace', level);\n\n  ctx.log = logger;\n  _setupAwsLogger({ctx});\n  _setupLongStacktraces({ctx});\n};\n\nexport default exports;\n"]}