{"version":3,"sources":["../src/express-middleware.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;AAEA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,IAAI,gCAAY,UAAS,EAAT,EAAa;AAClC,SAAO;AAAA,wCAAa,WAAe,GAAG,IAAlB,EAAwB;AAC1C,UAAI,MAAM,KAAK,CAAL,CAAV;AACA,UAAI,MAAM,KAAK,KAAK,MAAL,GAAc,CAAnB,CAAV;;AAEA,UAAI;AACF,cAAM,GAAG,GAAG,IAAN,CAAN;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,YAAI,GAAJ,CAAQ,KAAR,CAAc,EAAC,GAAD,EAAd;AACA,YAAI,IAAI,WAAR,EAAqB;AACnB;AACD;;AAED,YAAI,KAAJ;AACA,YAAI,IAAI,GAAJ,CAAQ,GAAR,CAAY,KAAZ,MAAuB,IAAI,GAAJ,CAAQ,GAAR,CAAY,YAAZ,CAAyB,OAAzB,CAA3B,EAA8D;AAC5D,kBAAQ,IAAI,KAAJ,GAAY,0BAAE,KAAF,CAAQ,IAAI,KAAZ,EAAmB,IAAnB,CAAZ,GAAuC,GAA/C;AACD;;AAED,YAAI,GAAJ,CAAQ,8BAAR,GAAyC,KAAzC;;AAEA,YAAI,MAAJ,CAAW,GAAX;AACA,YAAI,GAAJ,CAAQ,cAAR,EAAwB,0BAAxB;AACA,YAAI,IAAJ,CAAS;AACP,gBAAM,aADC;AAEP,iBAAO,uBAFA;AAGP,kBAAQ,GAHD;AAIP,oBAAU,gCAAmB,GAAnB,CAJH;AAKP,oBAAU,aALH;AAMP;AANO,SAAT;;AASA;AACD;AACF,KAhCM;;AAAA;AAAA;AAAA;AAAA,OAAP;AAiCD,CAlCM;;kBAoCQ,S","file":"express-middleware.js","sourcesContent":["import _ from 'lodash-firecloud';\n\nimport {\n  asyncHandler,\n  getRequestInstance\n} from './lambda';\n\n// export let accepts = function(types) {\n//   return exports.bootstrap(async function(req, res) {\n//     res.mediaType = req.accepts(types);\n//     if (!res.mediaType) {\n//       return res.sendError(406);\n//     }\n//   });\n// };\n\n// export let is = function(types) {\n//   return exports.bootstrap(async function(req, res) {\n//     req.mediaType = req.is(types);\n//     if (!req.mediaType) {\n//       return res.sendError(415);\n//     }\n//   });\n// };\n\nexport let bootstrap = function(fn) {\n  return asyncHandler(async function(...args) {\n    let res = args[1];\n    let req = args[args.length - 3];\n\n    try {\n      await fn(...args);\n    } catch (err) {\n      res.log.error({err});\n      if (res.headersSent) {\n        return;\n      }\n\n      let trace;\n      if (res.ctx.log.level() <= res.ctx.log.resolveLevel('TRACE')) {\n        trace = err.stack ? _.split(err.stack, '\\n') : err;\n      }\n\n      res.ctx.callbackWaitsForEmptyEventLoop = false;\n\n      res.status(500);\n      res.set('content-type', 'application/problem+json');\n      res.send({\n        type: 'about:blank',\n        title: 'Internal Server Error',\n        status: 500,\n        instance: getRequestInstance(req),\n        renderer: 'lambda-util',\n        trace\n      });\n\n      // don't process.exit()\n    }\n  });\n};\n\nexport default bootstrap;\n"]}