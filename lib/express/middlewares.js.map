{"version":3,"sources":["../../src/express/middlewares.ts"],"names":[],"mappings":"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","file":"middlewares.js","sourcesContent":["import * as reqMixins from './req-mixins';\nimport * as resMixins from './res-mixins';\nimport ResponseError from './res-error';\nimport _ from 'lodash-firecloud';\nimport express from 'express';\n\nimport {\n  getRequestInstance\n} from '../lambda';\n\nimport {\n  ExpressLambdaRequest,\n  ExpressLambdaResponse\n} from '../types';\n\nexport let applyMixins = function() {\n  return function(req: ExpressLambdaRequest, res: ExpressLambdaResponse, next: express.NextFunction) {\n    _.forEach(reqMixins, function(fn, name) {\n      req[name] = _.bind(fn, req);\n    });\n\n    res.oldSend = res.send.bind(res); // required by the res.send mixin\n    res.oldType = res.type.bind(res); // required by the res.type mixin\n    _.forEach(resMixins, function(fn, name) {\n      res[name] = _.bind(fn, res);\n    });\n\n    next();\n  };\n};\n\nexport let xForward = function() {\n  return function(req: ExpressLambdaRequest, _res: ExpressLambdaResponse, next: express.NextFunction) {\n    req.headers = _.mapKeys(req.headers, function(_value, key) {\n      return _.replace(key, /^X-Forward-/, '');\n    });\n\n    next();\n  };\n};\n\nlet _sendResponseError = function(res: ExpressLambdaResponse, err: ResponseError): void {\n  let {\n    code: status,\n    contentType,\n    body\n  } = err;\n\n  body.instance = getRequestInstance({ctx: res.ctx});\n\n  res.status(status);\n  res.type(contentType);\n  res.send(body);\n};\n\nexport let handleResponseError = function() {\n  // function arity is important to distinguish to express that this is an error handler\n  // eslint-disable-next-line max-params\n  return async function(\n    err: Error,\n    _req: ExpressLambdaRequest,\n    res: ExpressLambdaResponse,\n    _next: express.NextFunction\n  ) {\n    let {\n      ctx\n    } = res;\n\n    await ctx.log.error('Handling response error...', {\n      err\n    });\n\n    if (res.headersSent) {\n      await ctx.log.error(\"Headers already sent. Can't send error.\");\n      // bypass express' final-handler\n      // return next(err);\n      return res._next(err);\n    }\n\n    if (err instanceof ResponseError) {\n      await ctx.log.error(`Responding with ${err.code} ${err.message}...`);\n      _sendResponseError(res, err);\n      return;\n    }\n\n    if (res.ctx.log._canTrace) {\n      // preferrably we would like to respond with a stacktrace\n      // and reset state (kill lambda), but it is impossible to do so:\n      // AWS will freeze the lambda execution right after responding,\n      // and kill the lambda on the subsequent request\n\n      await ctx.log.info('Responding with trace...');\n      let internalErr = new ResponseError(500, {\n        renderer: 'aws-util-firecloud',\n        trace: _.isDefined(err.stack) ? _.split(err.stack, '\\n') : err\n      });\n      _sendResponseError(res, internalErr);\n      return;\n    }\n\n    // let the lambda bootstrap handle this error e.g. process.exit(1)\n    // and thus reset state (kill lambda)\n    // and let API Gateway respond with 502 Bad Gateway.\n\n    // NOTE: we cannot throw, because the error will be caught\n    // by express' Layer.prototype.handle_error code\n\n    res._next(err);\n  };\n};\n"]}