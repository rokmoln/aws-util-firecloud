{"version":3,"sources":["../../src/express/middlewares.js"],"names":[],"mappings":"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","file":"middlewares.js","sourcesContent":["import ResponseError from './res-error';\nimport _ from 'lodash-firecloud';\nimport pkg from '../../package.json';\nimport reqMixins from './req-mixins';\nimport resMixins from './res-mixins';\n\nimport {\n  getRequestInstance\n} from '../lambda';\n\nlet _reqMixins = _.omit(reqMixins, 'default');\nlet _resMixins = _.omit(resMixins, 'default');\n\nexport let applyMixins = function() {\n  return function(req, res, next) {\n    _.forEach(_reqMixins, function(fn, name) {\n      req[name] = _.bind(fn, req);\n    });\n\n    res.oldSend = res.send; // required by the res.send mixin\n    res.oldType = res.type; // required by the res.type mixin\n    _.forEach(_resMixins, function(fn, name) {\n      res[name] = _.bind(fn, res);\n    });\n\n    next();\n  };\n};\n\nexport let xForward = function() {\n  return function(req, _res, next) {\n    req.headers = _.mapKeys(req.headers, function(_value, key) {\n      return _.replace(key, /^X-Forward-/, '');\n    });\n\n    next();\n  };\n};\n\nlet _sendResponseError = function(res, err) {\n  let {\n    code: status,\n    contentType,\n    body\n  } = err;\n\n  body.instance = getRequestInstance(res.req);\n\n  res.status(status);\n  res.type(contentType);\n  res.send(body);\n};\n\nexport let handleResponseError = function() {\n  // function arity is important to distinguish to express\n  // that this is an error handler\n  return function(err, _req, res, _next) {\n    let {\n      ctx\n    } = res;\n\n    ctx.log.error({err});\n\n    if (res.headersSent) {\n      ctx.log.error(\"Headers already sent. Can't send error.\");\n      // bypass express' final-handler\n      // return next(err);\n      return res._next(err);\n    }\n\n    if (err instanceof ResponseError) {\n      ctx.log.error(`Responding with ${err.code} ${err.message}...`);\n      _sendResponseError(res, err);\n      return;\n    }\n\n    if (res.ctx.log._canTrace) {\n      // preferrably we would like to respond with a stacktrace\n      // and reset state (kill lambda), but it is impossible to do so:\n      // AWS will freeze the lambda execution right after responding,\n      // and kill the lambda on the subsequent request\n\n      ctx.log.info('Responding with trace...');\n      let internalErr = new ResponseError(500, {\n        renderer: pkg.name,\n        trace: err.stack ? _.split(err.stack, '\\n') : err\n      });\n      _sendResponseError(res, internalErr);\n      return;\n    }\n\n    // let the lambda bootstrap handle this error e.g. process.exit(1)\n    // and thus reset state (kill lambda)\n    // and let API Gateway respond with 502 Bad Gateway.\n\n    // NOTE: we cannot throw, because the error will be caught\n    // by express' Layer.prototype.handle_error code\n\n    res._next(err);\n  };\n};\n\nexport default exports;\n"]}