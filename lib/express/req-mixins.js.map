{"version":3,"sources":["../../src/express/req-mixins.ts"],"names":[],"mappings":";AACA;AACA;;;;;;;;;;AAUA,0B,8FAZA;;;;AAgBO,IAAI,UAAU,GAAG,YAA0C;AAChE,MAAI;AACF,IAAA,GADE;AAEA,OAAK,GAFT;AAGA,MAAI,OAAO,GAAG,IAAI,QAAJ,CAAS,GAAE,GAAG,CAAC,sBAAuB,GAAE,KAAK,WAAY,EAAzD,CAAd;AACA,SAAO,OAAP;AACD,CANM,C;;AAQA,IAAI,gBAAgB,GAAG,UAAqC;AACjE,EAAA,OADiE;AAEjE,EAAA,GAFiE,EAArC;;;;AAMtB;AACN,MAAI,OAAO,GAAG,IAAI,QAAJ,CAAQ,KAAK,UAAL,GAAkB,QAAlB,EAAR,CAAd;AACA,EAAA,OAAO,CAAC,YAAR,CAAqB,GAArB,CAAyB,UAAzB,EAAqC,yBAAE,QAAF,CAAW,OAAX,CAArC;AACA,EAAA,OAAO,CAAC,YAAR,CAAqB,GAArB,CAAyB,KAAzB,EAAgC,GAAhC;;AAEA,SAAO,OAAP;AACD,CAZM,C;;AAcA,IAAI,OAAO,GAAG,YAAgD;AACnE,MAAI;AACF,IAAA,IADE;AAEA,MAFJ;AAGA,MAAI;AACF,QAAI,YAAY,IAAZ,CAAiB,KAAK,GAAL,CAAS,cAAT,CAAjB,CAAJ,EAAgD;AAC9C,MAAA,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,IAAhB,CAAP;AACD;AACF,GAJD,CAIE,OAAO,YAAP,EAAqB;AACrB,UAAM,IAAI,iBAAJ,CAAkB,GAAlB,EAAuB;AAC3B,MAAA,MAAM,EAAE,YADmB,EAAvB,CAAN;;AAGD;;AAED,MAAI,yBAAE,SAAF,CAAY,KAAK,QAAjB,CAAJ,EAAgC;AAC9B,QAAI,KAAK,GAAG,KAAK,QAAL,CAAc,IAAd,CAAZ;AACA,QAAI,CAAC,KAAL,EAAY;AACV,YAAM,IAAI,iBAAJ,CAAkB,GAAlB,EAAuB;AAC3B,QAAA,MAAM,EAAE,KAAK,QAAL,CAAc,MADK;AAE3B,QAAA,MAAM,EAAE,KAAK,QAAL,CAAc,MAFK,EAAvB,CAAN;;AAID;AACF;;AAED,SAAO,IAAP;AACD,CAzBM,C","file":"req-mixins.js","sourcesContent":["/* eslint-disable babel/no-invalid-this */\nimport ResponseError from './res-error';\nimport _ from 'lodash-firecloud';\n\nimport {\n  ExpressLambdaRequest\n} from '../types';\n\nimport {\n  JsonValue\n} from 'lodash-firecloud/types';\n\nimport {\n  URL\n} from 'url';\n\nexport let getSelfUrl = function(this: ExpressLambdaRequest): URL {\n  let {\n    env\n  } = this.ctx;\n  let selfUrl = new URL(`${env.API_SECONDARY_BASE_URL}${this.originalUrl}`);\n  return selfUrl;\n};\n\nexport let getPaginationUrl = function(this: ExpressLambdaRequest, {\n  perPage,\n  ref\n}: {\n  perPage: number;\n  ref: string;\n}): URL {\n  let pageUrl = new URL(this.getSelfUrl().toString());\n  pageUrl.searchParams.set('per_page', _.toString(perPage));\n  pageUrl.searchParams.set('ref', ref);\n\n  return pageUrl;\n};\n\nexport let getBody = function(this: ExpressLambdaRequest): JsonValue {\n  let {\n    body\n  } = this;\n  try {\n    if (/[/+]json$/.test(this.get('content-type'))) {\n      body = JSON.parse(this.body);\n    }\n  } catch (syntaxErrors) {\n    throw new ResponseError(400, {\n      errors: syntaxErrors\n    });\n  }\n\n  if (_.isDefined(this.validate)) {\n    let valid = this.validate(body);\n    if (!valid) {\n      throw new ResponseError(422, {\n        errors: this.validate.errors,\n        schema: this.validate.schema\n      });\n    }\n  }\n\n  return body;\n};\n"]}